create or replace PACKAGE INSIDENT_LIST_PACK AS
     FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
--     FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
     FUNCTION VIEW_INCIDENT(I_main_case_id IN NUMBER, I_child_case_id NUMBER,I_incident_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
     FUNCTION GET_BRANCH_COMMENT_DETAILS (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER,I_incident_id IN NUMBER) RETURN BRANCH_COMMENT_TYPE_LIST;
--     FUNCTION UPDATE_FOLLOW_ACTION_DATA(f_rectified IN NUMBER, f_rec_date IN VARCHAR2,f_target_date IN VARCHAR2,f_res_officer IN VARCHAR2, i_id IN NUMBER)RETURN VARCHAR2;

    FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID(I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST;
    FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_DIV (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user_div IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST;
    

FUNCTION UPDATE_AUDIT_INCIDENT(
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2;

FUNCTION UPDATE_AUDIT_INCIDENT_BR(
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2;
     --FUNCTION GET_FUR_BR_FLU_COMMENTS(I_main_case_id IN NUMBER,I_child_case_id IN NUMBER, I_incident_id IN NUMBER)RETURN FR_BR_FUL_COMMENT_TYPE_LIST;
     
FUNCTION UPDATE_INCIDENT_FROM_BR(----new addition on 27-02-24
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE,
    P_policiesAndProcedure IN NUMBER,
    P_processAndExecution IN NUMBER,
    p_hr IN NUMBER,
    P_IT IN NUMBER,
    P_performanceMeasurement IN NUMBER,
    P_detailsRootCause IN VARCHAR2
    
) RETURN VARCHAR2;

FUNCTION UPDATE_AUDIT_INCIDENT_FROM_AUDIT(i_json IN CLOB,i_incidentComment IN BLOB,i_brComment IN BLOB, i_furComment IN BLOB,i_followComment IN BLOB,i_qacomment IN BLOB) RETURN VARCHAR2;

FUNCTION UPDATE_INCIDENT_BY_BR(i_json IN CLOB,i_brComment IN BLOB,i_followComment IN BLOB)RETURN VARCHAR2;

FUNCTION ADD_RM_COMMENT (i_incident_id IN NUMBER , i_rm_comment IN BLOB)RETURN VARCHAR2;
FUNCTION ADD_QA_COMMENT (i_incident_id IN NUMBER , i_qa_comment IN BLOB)RETURN VARCHAR2;

FUNCTION GET_INCIDENT_FOR_MAIN_CASE(i_main_case_id IN NUMBER)RETURN SYS_REFCURSOR;

END  INSIDENT_LIST_PACK;
/
create or replace PACKAGE BODY INSIDENT_LIST_PACK AS --updated on 4/3/24
  FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS 
    SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.OVERALL_RISK_VALUE,
        i.FYI,
        c.CASE_CREATED_USER,
        i.RM_COMMENT,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c
       where i.MAIN_CASE_ID =I_main_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.DEL_FLAG=0;
       
       CURSOR ALL_INCI_CUR1 IS 
        SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.OVERALL_RISK_VALUE,
        i.FYI,
        c.CASE_CREATED_USER,
        i.RM_COMMENT,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c 
       where i.MAIN_CASE_ID =I_main_case_id and i.CHILD_CASE_ID = I_child_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.DEL_FLAG=0;
        
    AUDIT_INSIDENT_LIST AUDIT_INSIDENT_TYPE_LIST;
    AUDIT_INSIDENT AUDIT_INSIDENT_TYPE;
  BEGIN
      AUDIT_INSIDENT_LIST:=NEW AUDIT_INSIDENT_TYPE_LIST();
      IF(I_child_case_id = 0) THEN
        FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=MAIN_CUR_REC.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=MAIN_CUR_REC.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=MAIN_CUR_REC.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := MAIN_CUR_REC.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := MAIN_CUR_REC.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=MAIN_CUR_REC.FYI;
        AUDIT_INSIDENT.OVERALL_RISK_VALUE:=MAIN_CUR_REC.OVERALL_RISK_VALUE;
        AUDIT_INSIDENT.RM_COMMENT:=MAIN_CUR_REC.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=MAIN_CUR_REC.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=MAIN_CUR_REC.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=MAIN_CUR_REC.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=MAIN_CUR_REC.QA_COMMENT;
--        AUDIT_INCIDENT
       
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      
      ELSE
        FOR ALL_INCI_CUR_REC1 IN ALL_INCI_CUR1 LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
       
        AUDIT_INSIDENT.MAIN_CASE_ID := ALL_INCI_CUR_REC1.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := ALL_INCI_CUR_REC1.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=ALL_INCI_CUR_REC1.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=ALL_INCI_CUR_REC1.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=ALL_INCI_CUR_REC1.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=ALL_INCI_CUR_REC1.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=ALL_INCI_CUR_REC1.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=ALL_INCI_CUR_REC1.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=ALL_INCI_CUR_REC1.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=ALL_INCI_CUR_REC1.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=ALL_INCI_CUR_REC1.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=ALL_INCI_CUR_REC1.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=ALL_INCI_CUR_REC1.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=ALL_INCI_CUR_REC1.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=ALL_INCI_CUR_REC1.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=ALL_INCI_CUR_REC1.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=ALL_INCI_CUR_REC1.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=ALL_INCI_CUR_REC1.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=ALL_INCI_CUR_REC1.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=ALL_INCI_CUR_REC1.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=ALL_INCI_CUR_REC1.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=ALL_INCI_CUR_REC1.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=ALL_INCI_CUR_REC1.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=ALL_INCI_CUR_REC1.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=ALL_INCI_CUR_REC1.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=ALL_INCI_CUR_REC1.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=ALL_INCI_CUR_REC1.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := ALL_INCI_CUR_REC1.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := ALL_INCI_CUR_REC1.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := ALL_INCI_CUR_REC1.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := ALL_INCI_CUR_REC1.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := ALL_INCI_CUR_REC1.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := ALL_INCI_CUR_REC1.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := ALL_INCI_CUR_REC1.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := ALL_INCI_CUR_REC1.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := ALL_INCI_CUR_REC1.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := ALL_INCI_CUR_REC1.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=ALL_INCI_CUR_REC1.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=ALL_INCI_CUR_REC1.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=ALL_INCI_CUR_REC1.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=ALL_INCI_CUR_REC1.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=ALL_INCI_CUR_REC1.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=ALL_INCI_CUR_REC1.FYI;
        AUDIT_INSIDENT.OVERALL_RISK_VALUE:=ALL_INCI_CUR_REC1.OVERALL_RISK_VALUE;
        AUDIT_INSIDENT.RM_COMMENT:=ALL_INCI_CUR_REC1.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=ALL_INCI_CUR_REC1.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=ALL_INCI_CUR_REC1.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=ALL_INCI_CUR_REC1.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=ALL_INCI_CUR_REC1.QA_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      END IF;
      
    
    RETURN AUDIT_INSIDENT_LIST;
  END GET_INCIDENT_LIST_BY_CHILD_CASE_ID;
  
FUNCTION VIEW_INCIDENT (I_main_case_id IN NUMBER, I_child_case_id NUMBER,I_incident_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS
    
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INCIDENT_ID,AUDIT_STATUS,IMPACT,LIKELIHOOD,OVERALL_RISK,SAMPLE_COUNT,ISSUE_COUNT,POTENTIAL_IMPACT,RECOMMENDATION,ROOT_CAUSE,DETAILS_ROOT_CAUSE,AGREE_WITH_AUDIT,
    RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,COMMENT_HEADING,INCIDENT_COMMENT,INCIDENT_CREATED_USER,INCIDENT_CURRENT_ASSIGNED_USER,INCIDENT_CREATED_DIV,INCIDENT_CURRENT_ASSIGNED_DIV,HR,
    POLICIES_AND_PROCEDURE,PROCESS_AND_EXECUTION,IT,PERFORMANCE_MEASUREMENT,LAST_NODE1,LAST_NODE_ORDER1,LAST_NODE2,LAST_NODE_ORDER2,LAST_NODE3,LAST_NODE_ORDER3,
    LAST_NODE4,LAST_NODE_ORDER4,LAST_NODE5,LAST_NODE_ORDER5,LAST_NODE_ID,LAST_NODE_ELEMENT_ORDER,OVERALL_INCIDENT_STATUS,FOLLOW_UP_RECTIFIED,FOLLOW_UP_RECTIFIED_DATE,FOLLOW_UP_TARGET_DATE,FOLLOW_UP_RESPONSIBLE_OFFICER,TARGET_DATE,BR_COMMENT,FUR_COMMENT,FOLLOW_UP_COMMENT,OVERALL_RISK_VALUE,FYI,RM_COMMENT,FOLLOW_UP_AGREED,
    QA_COMMENT,CHANGES_FOR_AUDIT_COMMENT,REPLY_FLAG,OTHER_PROC_EXAMINE_DES,
    (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
    FROM AUDIT_INCIDENT_TBL
    WHERE MAIN_CASE_ID= I_main_case_id AND CHILD_CASE_ID=I_child_case_id AND INCIDENT_ID=I_incident_id AND DEL_FLAG !=1;
    
    il AUDIT_INSIDENT_TYPE_LIST;
    it AUDIT_INSIDENT_TYPE;
    
    BEGIN
    
    il:=NEW AUDIT_INSIDENT_TYPE_LIST();
   
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
      it:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
      
        it.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        it.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        it.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        it.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        it.IMPACT:=MAIN_CUR_REC.IMPACT;
        it.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        it.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        it.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        it.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        it.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        it.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        it.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        it.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        it.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        it.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        it.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        it.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        it.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        it.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        it.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        it.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        it.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        it.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        it.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        it.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        it.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        it.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        it.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        it.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        it.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        it.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        it.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        it.HR:=MAIN_CUR_REC.HR;
        it.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        it.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        it.IT:=MAIN_CUR_REC.IT;
        it.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        it.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        it.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        it.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        it.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        it.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        it.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        it.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        it.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        it.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        it.FOLLOW_UP_RECTIFIED := MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        it.FOLLOW_UP_RECTIFIED_DATE :=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        it.FOLLOW_UP_TARGET_DATE := MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        it.FOLLOW_UP_RESPONSIBLE_OFFICER :=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        it.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        it.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        it.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        it.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        it.OVERALL_RISK_VALUE:=MAIN_CUR_REC.OVERALL_RISK_VALUE;
        it.FYI:=MAIN_CUR_REC.FYI;
        it.RM_COMMENT:=MAIN_CUR_REC.RM_COMMENT;
        it.FOLLOW_UP_AGREED:=MAIN_CUR_REC.FOLLOW_UP_AGREED;
        it.CHANGES_FOR_AUDIT_COMMENT:=MAIN_CUR_REC.CHANGES_FOR_AUDIT_COMMENT;
        it.QA_COMMENT:=MAIN_CUR_REC.QA_COMMENT;
        it.OTHER_PROC_EXAMINE_DES:=MAIN_CUR_REC.OTHER_PROC_EXAMINE_DES;
        it.REPLY_FLAG:=MAIN_CUR_REC.REPLY_FLAG;
        
        il.EXTEND;
        il(il.LAST):=it;
      END LOOP;
  
  RETURN il;
  END VIEW_INCIDENT;
  
   FUNCTION GET_BRANCH_COMMENT_DETAILS (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER,I_incident_id IN NUMBER) RETURN BRANCH_COMMENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INSIDENT_ID, INSIDENT_COMMENT,AGREE_WITH_AUDIT,RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,TARGET_DATE,COMMENT_ADDED_DATE
    FROM AUDIT_INSIDENT_COMMENT_TBL
    WHERE MAIN_CASE_ID = I_main_case_id
    AND CHILD_CASE_ID = I_child_case_id
    AND INSIDENT_ID = I_incident_id ORDER BY COMMENT_ADDED_DATE DESC FETCH FIRST 1 ROWS ONLY;
    
    CURSOR SUB_CUR IS
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INSIDENT_ID, INSIDENT_COMMENT,AGREE_WITH_AUDIT,RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,TARGET_DATE,COMMENT_ADDED_DATE
    FROM AUDIT_INSIDENT_COMMENT_TBL
    WHERE MAIN_CASE_ID = I_main_case_id
   -- AND CHILD_CASE_ID = I_child_case_id
    AND INSIDENT_ID = I_incident_id ORDER BY COMMENT_ADDED_DATE DESC FETCH FIRST 1 ROWS ONLY;
    
    bcl BRANCH_COMMENT_TYPE_LIST;
    bc BRANCH_COMMENT_TYPE;
    
    BEGIN
    
    bcl:=NEW BRANCH_COMMENT_TYPE_LIST();
    IF(I_child_case_id = 0) THEN
    
      FOR SUB_CUR_REC IN SUB_CUR LOOP
      bc:= NEW  BRANCH_COMMENT_TYPE(0,'',0,null,null,null,0,0,0,null);
      
        bc.MAIN_CASE_ID := SUB_CUR_REC.MAIN_CASE_ID;
        bc.AGREE_WITH_AUDIT :=SUB_CUR_REC.AGREE_WITH_AUDIT;
        bc.RESPONSIBLE_OFFICER := SUB_CUR_REC.RESPONSIBLE_OFFICER;
        bc.RECTIFIED := SUB_CUR_REC.RECTIFIED;
        bc.RECTIFY_DATE := SUB_CUR_REC.RECTIFY_DATE;
        bc.TARGET_DATE := SUB_CUR_REC.TARGET_DATE;
        bc.COMMENT_ADDED_DATE := SUB_CUR_REC.COMMENT_ADDED_DATE;
        bc.CHILD_CASE_ID := SUB_CUR_REC.CHILD_CASE_ID;
        bc.INSIDENT_ID :=SUB_CUR_REC.INSIDENT_ID;
        bc.INSIDENT_COMMENT := SUB_CUR_REC.INSIDENT_COMMENT;
        
        bcl.EXTEND;
        bcl(bcl.LAST):=bc;
      END LOOP;
      ELSE
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
      bc:= NEW  BRANCH_COMMENT_TYPE(0,'',0,null,null,null,0,0,0,null);
      
        bc.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        bc.AGREE_WITH_AUDIT :=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        bc.RESPONSIBLE_OFFICER := MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        bc.RECTIFIED := MAIN_CUR_REC.RECTIFIED;
        bc.RECTIFY_DATE := MAIN_CUR_REC.RECTIFY_DATE;
        bc.TARGET_DATE := MAIN_CUR_REC.TARGET_DATE;
        bc.COMMENT_ADDED_DATE := MAIN_CUR_REC.COMMENT_ADDED_DATE;
        bc.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        bc.INSIDENT_ID :=MAIN_CUR_REC.INSIDENT_ID;
        bc.INSIDENT_COMMENT := MAIN_CUR_REC.INSIDENT_COMMENT;
        
        bcl.EXTEND;
        bcl(bcl.LAST):=bc;
      END LOOP;
      
      END IF;
  
  RETURN bcl;
  END GET_BRANCH_COMMENT_DETAILS;
  
  
------------------------------------------------------------------------------
--GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID

FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS 
    SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.FYI,
        i.RM_COMMENT,
        c.CASE_CREATED_USER,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c
       where i.MAIN_CASE_ID =I_main_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_USER = I_current_assigned_user AND i.DEL_FLAG=0;
       
       CURSOR ALL_INCI_CUR1 IS 
        SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.FYI,
        i.RM_COMMENT,
        c.CASE_CREATED_USER,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c 
       where i.MAIN_CASE_ID =I_main_case_id and i.CHILD_CASE_ID = I_child_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_USER = I_current_assigned_user AND i.DEL_FLAG=0;
        
    AUDIT_INSIDENT_LIST AUDIT_INSIDENT_TYPE_LIST;
    AUDIT_INSIDENT AUDIT_INSIDENT_TYPE;
  BEGIN
      AUDIT_INSIDENT_LIST:=NEW AUDIT_INSIDENT_TYPE_LIST();
      IF(I_child_case_id = 0) THEN
        FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=MAIN_CUR_REC.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=MAIN_CUR_REC.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=MAIN_CUR_REC.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := MAIN_CUR_REC.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := MAIN_CUR_REC.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=MAIN_CUR_REC.FYI;
        AUDIT_INSIDENT.RM_COMMENT:=MAIN_CUR_REC.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=MAIN_CUR_REC.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=MAIN_CUR_REC.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=MAIN_CUR_REC.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=MAIN_CUR_REC.QA_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      
      ELSE
        FOR ALL_INCI_CUR_REC1 IN ALL_INCI_CUR1 LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := ALL_INCI_CUR_REC1.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := ALL_INCI_CUR_REC1.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=ALL_INCI_CUR_REC1.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=ALL_INCI_CUR_REC1.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=ALL_INCI_CUR_REC1.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=ALL_INCI_CUR_REC1.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=ALL_INCI_CUR_REC1.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=ALL_INCI_CUR_REC1.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=ALL_INCI_CUR_REC1.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=ALL_INCI_CUR_REC1.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=ALL_INCI_CUR_REC1.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=ALL_INCI_CUR_REC1.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=ALL_INCI_CUR_REC1.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=ALL_INCI_CUR_REC1.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=ALL_INCI_CUR_REC1.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=ALL_INCI_CUR_REC1.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=ALL_INCI_CUR_REC1.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=ALL_INCI_CUR_REC1.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=ALL_INCI_CUR_REC1.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=ALL_INCI_CUR_REC1.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=ALL_INCI_CUR_REC1.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=ALL_INCI_CUR_REC1.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=ALL_INCI_CUR_REC1.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=ALL_INCI_CUR_REC1.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=ALL_INCI_CUR_REC1.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=ALL_INCI_CUR_REC1.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=ALL_INCI_CUR_REC1.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := ALL_INCI_CUR_REC1.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := ALL_INCI_CUR_REC1.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := ALL_INCI_CUR_REC1.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := ALL_INCI_CUR_REC1.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := ALL_INCI_CUR_REC1.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := ALL_INCI_CUR_REC1.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := ALL_INCI_CUR_REC1.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := ALL_INCI_CUR_REC1.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := ALL_INCI_CUR_REC1.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := ALL_INCI_CUR_REC1.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=ALL_INCI_CUR_REC1.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=ALL_INCI_CUR_REC1.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=ALL_INCI_CUR_REC1.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=ALL_INCI_CUR_REC1.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=ALL_INCI_CUR_REC1.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=ALL_INCI_CUR_REC1.FYI;
        AUDIT_INSIDENT.RM_COMMENT:=ALL_INCI_CUR_REC1.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=ALL_INCI_CUR_REC1.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=ALL_INCI_CUR_REC1.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=ALL_INCI_CUR_REC1.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=ALL_INCI_CUR_REC1.QA_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      END IF;
      
    
    RETURN AUDIT_INSIDENT_LIST;
  END GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID;
  
  
  FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_DIV (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user_div IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS 
    SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.FYI,
        i.RM_COMMENT,
        c.CASE_CREATED_USER,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c
       where i.MAIN_CASE_ID =I_main_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_DIV = I_current_assigned_user_div AND i.DEL_FLAG=0;
       
       CURSOR ALL_INCI_CUR1 IS 
        SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        i.FYI,
        i.RM_COMMENT,
        c.CASE_CREATED_USER,
        i.FOLLOW_UP_AGREED,
        i.OTHER_PROC_EXAMINE_DES,
        i.REPLY_FLAG,
        i.QA_COMMENT,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c 
       where i.MAIN_CASE_ID =I_main_case_id and i.CHILD_CASE_ID = I_child_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_DIV = I_current_assigned_user_div AND i.DEL_FLAG=0;
        
    AUDIT_INSIDENT_LIST AUDIT_INSIDENT_TYPE_LIST;
    AUDIT_INSIDENT AUDIT_INSIDENT_TYPE;
  BEGIN
      AUDIT_INSIDENT_LIST:=NEW AUDIT_INSIDENT_TYPE_LIST();
      IF(I_child_case_id = 0) THEN
        FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=MAIN_CUR_REC.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=MAIN_CUR_REC.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=MAIN_CUR_REC.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := MAIN_CUR_REC.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := MAIN_CUR_REC.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=MAIN_CUR_REC.FYI;
        AUDIT_INSIDENT.RM_COMMENT:=MAIN_CUR_REC.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=MAIN_CUR_REC.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=MAIN_CUR_REC.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=MAIN_CUR_REC.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=MAIN_CUR_REC.QA_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      
      ELSE
        FOR ALL_INCI_CUR_REC1 IN ALL_INCI_CUR1 LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null,0.0,0,null,0,'',null,null,0);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := ALL_INCI_CUR_REC1.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := ALL_INCI_CUR_REC1.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=ALL_INCI_CUR_REC1.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=ALL_INCI_CUR_REC1.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=ALL_INCI_CUR_REC1.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=ALL_INCI_CUR_REC1.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=ALL_INCI_CUR_REC1.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=ALL_INCI_CUR_REC1.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=ALL_INCI_CUR_REC1.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=ALL_INCI_CUR_REC1.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=ALL_INCI_CUR_REC1.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=ALL_INCI_CUR_REC1.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=ALL_INCI_CUR_REC1.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=ALL_INCI_CUR_REC1.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=ALL_INCI_CUR_REC1.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=ALL_INCI_CUR_REC1.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=ALL_INCI_CUR_REC1.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=ALL_INCI_CUR_REC1.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=ALL_INCI_CUR_REC1.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=ALL_INCI_CUR_REC1.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=ALL_INCI_CUR_REC1.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=ALL_INCI_CUR_REC1.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=ALL_INCI_CUR_REC1.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=ALL_INCI_CUR_REC1.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=ALL_INCI_CUR_REC1.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=ALL_INCI_CUR_REC1.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=ALL_INCI_CUR_REC1.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := ALL_INCI_CUR_REC1.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := ALL_INCI_CUR_REC1.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := ALL_INCI_CUR_REC1.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := ALL_INCI_CUR_REC1.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := ALL_INCI_CUR_REC1.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := ALL_INCI_CUR_REC1.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := ALL_INCI_CUR_REC1.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := ALL_INCI_CUR_REC1.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := ALL_INCI_CUR_REC1.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := ALL_INCI_CUR_REC1.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=ALL_INCI_CUR_REC1.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=ALL_INCI_CUR_REC1.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=ALL_INCI_CUR_REC1.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=ALL_INCI_CUR_REC1.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=ALL_INCI_CUR_REC1.FOLLOW_UP_COMMENT;
        AUDIT_INSIDENT.FYI:=ALL_INCI_CUR_REC1.FYI;
        AUDIT_INSIDENT.RM_COMMENT:=ALL_INCI_CUR_REC1.RM_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_AGREED:=ALL_INCI_CUR_REC1.FOLLOW_UP_AGREED;
        AUDIT_INSIDENT.OTHER_PROC_EXAMINE_DES:=ALL_INCI_CUR_REC1.OTHER_PROC_EXAMINE_DES;
        AUDIT_INSIDENT.REPLY_FLAG:=ALL_INCI_CUR_REC1.REPLY_FLAG;
        AUDIT_INSIDENT.QA_COMMENT:=ALL_INCI_CUR_REC1.QA_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      END IF;
      
    
    RETURN AUDIT_INSIDENT_LIST;
  END GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_DIV;
------------------------------------------------------------------------
--FUNCTION UPDATE_FOLLOW_ACTION_DATA(follow_up_rectified IN VARCHAR2, follow_up_rec_date IN VARCHAR2,follow_up_target_date IN VARCHAR2,follow_up_res_officer IN VARCHAR2, incident_id IN NUMBER)RETURN VARCHAR2
--FUNCTION UPDATE_FOLLOW_ACTION_DATA(f_rectified IN NUMBER, f_rec_date IN VARCHAR2,f_target_date IN VARCHAR2,f_res_officer IN VARCHAR2, i_id IN NUMBER)RETURN VARCHAR2 AS
--  status_of_updation VARCHAR2(10); 
--BEGIN
--
--  UPDATE AUDIT_INCIDENT_TBL
--  SET
--     FOLLOW_UP_RECTIFIED = f_rectified,
--     FOLLOW_UP_RECTIFIED_DATE = TO_TIMESTAMP(f_rec_date),
--     FOLLOW_UP_TARGET_DATE = TO_TIMESTAMP(f_target_date),
--     FOLLOW_UP_RESPONSIBLE_OFFICER= f_res_officer 
--  WHERE
--     INCIDENT_ID = i_id;
--     --commit;
--   dbms_output.put_line('Sucessfully 123 : - ' || sql%rowcount);
--    if sql%rowcount > 0 then
--   dbms_output.put_line('Sucessfully INSERT : - ');
--   commit;
--    status_of_updation := 'SUCESS'; 
--   ELSE
--   dbms_output.put_line('Sucessfully FAIL : - '  );
--   status_of_updation := 'FAIL';
--  end if;
--
--RETURN status_of_updation;
--END UPDATE_FOLLOW_ACTION_DATA;

FUNCTION UPDATE_AUDIT_INCIDENT(
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2 AS 
    status_reply VARCHAR2(50) := '';
BEGIN
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        FOLLOW_UP_RECTIFIED = p_rectified,
        FOLLOW_UP_RECTIFIED_DATE = TO_TIMESTAMP(p_rectified_date), -- Assuming the format
        FOLLOW_UP_TARGET_DATE = TO_TIMESTAMP(p_target_date), -- Assuming the format
        FOLLOW_UP_RESPONSIBLE_OFFICER = p_responsible_officer,
        FOLLOW_UP_COMMENT = p_br_comment
    WHERE INCIDENT_ID = p_incident_id;

    dbms_output.put_line('Update operation attempted on ' || sql%rowcount || ' rows.');

    IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully updated.');
        COMMIT;
        status_reply := 'SUCCESS';
    ELSE
        dbms_output.put_line('Update failed.');
        status_reply := 'FAILS';
    END IF;

    RETURN status_reply;
END UPDATE_AUDIT_INCIDENT;
  
FUNCTION UPDATE_AUDIT_INCIDENT_BR(
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2 AS 
    status_reply VARCHAR2(50) := '';
BEGIN
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        AGREE_WITH_AUDIT=P_agreed_with_audit,
        RECTIFIED  = p_rectified,
        RECTIFY_DATE = TO_TIMESTAMP(p_rectified_date), -- Assuming the format
        TARGET_DATE = TO_TIMESTAMP(p_target_date), -- Assuming the format
        RESPONSIBLE_OFFICER = p_responsible_officer,
        BR_COMMENT = p_br_comment
    WHERE INCIDENT_ID = p_incident_id;

    dbms_output.put_line('Update operation attempted on ' || sql%rowcount || ' rows.');

    IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully updated.');
        COMMIT;
        status_reply := 'SUCCESS';
    ELSE
        dbms_output.put_line('Update failed.');
        status_reply := 'FAILS';
    END IF;

    RETURN status_reply;
END UPDATE_AUDIT_INCIDENT_BR;


FUNCTION UPDATE_INCIDENT_FROM_BR(
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE,
    P_policiesAndProcedure IN NUMBER,
    P_processAndExecution IN NUMBER,
    p_hr IN NUMBER,
    P_IT IN NUMBER,
    P_performanceMeasurement IN NUMBER,
    P_detailsRootCause IN VARCHAR2
)RETURN VARCHAR2 AS 
    status_reply VARCHAR2(50) := '';
BEGIN
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        AGREE_WITH_AUDIT=P_agreed_with_audit,
        RECTIFIED  = p_rectified,
        RECTIFY_DATE = TO_TIMESTAMP(p_rectified_date), -- Assuming the format
        TARGET_DATE = TO_TIMESTAMP(p_target_date), -- Assuming the format
        RESPONSIBLE_OFFICER = p_responsible_officer,
        BR_COMMENT = p_br_comment,
        HR=p_hr,
        IT=P_IT,
        POLICIES_AND_PROCEDURE=P_policiesAndProcedure,
        PROCESS_AND_EXECUTION=P_processAndExecution,
        PERFORMANCE_MEASUREMENT=P_performanceMeasurement,
        DETAILS_ROOT_CAUSE=P_detailsRootCause
    WHERE INCIDENT_ID = p_incident_id;

    dbms_output.put_line('Update operation attempted on ' || sql%rowcount || ' rows.');

    IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully updated.');
        COMMIT;
        status_reply := 'SUCCESS';
    ELSE
        dbms_output.put_line('Update failed.');
        status_reply := 'FAILS';
    END IF;

    RETURN status_reply;
END UPDATE_INCIDENT_FROM_BR;

FUNCTION UPDATE_INCIDENT_BY_BR(i_json IN CLOB,i_brComment IN BLOB,i_followComment IN BLOB)RETURN VARCHAR2 AS
    l_incident_id NUMBER;
    l_update_success CONSTANT VARCHAR2(7) := 'SUCCESS';
    l_update_fail CONSTANT VARCHAR2(4) := 'FAIL';
    BEGIN
    SELECT JSON_VALUE(i_json,'$.incidentId')INTO l_incident_id FROM dual;
    
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        AGREE_WITH_AUDIT=JSON_VALUE(i_json,'$.agreeWithAudit'),
        RECTIFIED  =JSON_VALUE(i_json,'$.rectified'),
        RECTIFY_DATE = TO_TIMESTAMP(JSON_VALUE(i_json,'$.rectifiedDate')), -- Assuming the format
        TARGET_DATE = TO_TIMESTAMP(JSON_VALUE(i_json,'$.targetDate')), -- Assuming the format
        RESPONSIBLE_OFFICER = JSON_VALUE(i_json,'$.responsibleOfficer'),
        BR_COMMENT = i_brComment,
        HR=JSON_VALUE(i_json,'$.hr'),
        IT=JSON_VALUE(i_json,'$.it'),
        POLICIES_AND_PROCEDURE=JSON_VALUE(i_json,'$.policiesAndProcedure'),
        PROCESS_AND_EXECUTION=JSON_VALUE(i_json,'$.processAndExecution'),
        PERFORMANCE_MEASUREMENT=JSON_VALUE(i_json,'$.performanceMeasurement'),
        DETAILS_ROOT_CAUSE=JSON_VALUE(i_json,'$.detailsRootCause'),
        FOLLOW_UP_COMMENT=i_followComment,
        FOLLOW_UP_RECTIFIED=JSON_VALUE(i_json,'$.followUpRectified'),
        FOLLOW_UP_RECTIFIED_DATE=JSON_VALUE(i_json,'$.followUpRectifiedDate'),
        FOLLOW_UP_TARGET_DATE=JSON_VALUE(i_json,'$.followUpTargetDate'),
        FOLLOW_UP_RESPONSIBLE_OFFICER=JSON_VALUE(i_json,'$.followUpResponsibleOfficer'),
        FOLLOW_UP_AGREED=JSON_VALUE(i_json,'$.followUpAgreed'),
        CHANGES_FOR_AUDIT_COMMENT=JSON_VALUE(i_json,'$.changesForAuditComment')
    WHERE INCIDENT_ID = l_incident_id;
    
    
    IF SQL%ROWCOUNT > 0 THEN
            COMMIT;
            RETURN l_update_success;
        ELSE
            RETURN l_update_fail;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RETURN l_update_fail;
    
END UPDATE_INCIDENT_BY_BR;


FUNCTION UPDATE_AUDIT_INCIDENT_FROM_AUDIT(i_json IN CLOB,i_incidentComment IN BLOB,i_brComment IN BLOB, i_furComment IN BLOB,i_followComment IN BLOB,i_qacomment IN BLOB) RETURN VARCHAR2 AS---- need to add this to sqls
    l_incident_id NUMBER;
    l_update_success CONSTANT VARCHAR2(7) := 'SUCCESS';
    l_update_fail CONSTANT VARCHAR2(50) := 'Fail to update incident';
    BEGIN
      --extracting incident id from the parameter--
      SELECT JSON_VALUE(i_json,'$.incidentId')INTO l_incident_id FROM dual;
      
      ---update statement----
      UPDATE AUDIT_INCIDENT_TBL
        SET AUDIT_STATUS =JSON_VALUE(i_json,'$.auditStatus'),
            IMPACT=JSON_VALUE(i_json,'$.impact'),
            LIKELIHOOD=JSON_VALUE(i_json,'$.likelihood'),
            OVERALL_RISK=JSON_VALUE(i_json,'$.overallRisk'),
            SAMPLE_COUNT=JSON_VALUE(i_json,'$.sampleCount'),
            ISSUE_COUNT=JSON_VALUE(i_json,'$.issueCount'),
            POTENTIAL_IMPACT=JSON_VALUE(i_json,'$.potentialImpact'),
            RECOMMENDATION=JSON_VALUE(i_json,'$.recommendation'),
            ROOT_CAUSE=JSON_VALUE(i_json,'$.rootCause'),
--            DETAILS_ROOT_CAUSE=JSON_VALUE(i_json,'$.detailsRootCause'),
--            AGREE_WITH_AUDIT=JSON_VALUE(i_json,'$.agreeWithAudit'),
--            COMMENT_HEADING=JSON_VALUE(i_json,'$.commentHeading'),
--            RESPONSIBLE_OFFICER=JSON_VALUE(i_json,'$.responsibleOfficer'),
--            RECTIFIED=JSON_VALUE(i_json,'$.rectified'),
            
--            RECTIFY_DATE=TO_TIMESTAMP(JSON_VALUE(i_json,'$.rectifyDate')),--removed the date
            
            COMMENT_HEADING=JSON_VALUE(i_json,'$.commentHeading'),
            
            INCIDENT_COMMENT=i_incidentComment,
            BR_COMMENT_FLAG=1,
            
            LAST_NODE1=JSON_VALUE(i_json,'$.lastNode1'),
            LAST_NODE_ORDER1=JSON_VALUE(i_json,'$.lastNodeOrder1'),
            LAST_NODE2=JSON_VALUE(i_json,'$.lastNode2'),
            LAST_NODE_ORDER2=JSON_VALUE(i_json,'$.lastNodeOrder2'),
            LAST_NODE3=JSON_VALUE(i_json,'$.lastNode3'),
            LAST_NODE_ORDER3=JSON_VALUE(i_json,'$.lastNodeOrder3'),
            LAST_NODE4=JSON_VALUE(i_json,'$.lastNode4'),
            LAST_NODE_ORDER4=JSON_VALUE(i_json,'$.lastNodeOrder4'),
            LAST_NODE5=JSON_VALUE(i_json,'$.lastNode5'),
            LAST_NODE_ORDER5=JSON_VALUE(i_json,'$.lastNodeOrder5'),
            INCIDENT_CREATED_USER=JSON_VALUE(i_json,'$.incidentCreatedUser'),
--            INCIDENT_CURRENT_ASSIGNED_USER=JSON_VALUE(i_json,'$.incidentCurrentAssignedUser'),
            INCIDENT_CREATED_DIV=JSON_VALUE(i_json,'$.incidentCurrentAssignedDiv'),
--            INCIDENT_CURRENT_ASSIGNED_DIV=JSON_VALUE(i_json,'$.incidentCurrentAssignedDiv'),
            
--            HR=JSON_VALUE(i_json,'$.hr'),
--            POLICIES_AND_PROCEDURE=JSON_VALUE(i_json,'$.policiesAndProcedure'),
--            PROCESS_AND_EXECUTION=JSON_VALUE(i_json,'$.processAndExecution'),
--            IT=JSON_VALUE(i_json,'$.it'),
--            PERFORMANCE_MEASUREMENT=JSON_VALUE(i_json,'$.performanceMeasurement'),
            
--            TARGET_DATE=TO_TIMESTAMP(JSON_VALUE(i_json,'$.targetDate')),--removed the date
            
            LAST_NODE_ID=JSON_VALUE(i_json,'$.lastNodeId'),
            LAST_NODE_ELEMENT_ORDER=JSON_VALUE(i_json,'$.lastNodeElementOrder'),
            AUDIT_SECTION=JSON_VALUE(i_json,'$.auditSection'),---
            FYI=JSON_VALUE(i_json,'$.fyi'),
            OVERALL_INCIDENT_STATUS=JSON_VALUE(i_json,'$.overallIncidentStatus'),
--            FOLLOW_UP_RECTIFIED=JSON_VALUE(i_json,'$.followUpRectified'),
            
--            FOLLOW_UP_RECTIFIED_DATE=TO_TIMESTAMP(JSON_VALUE(i_json,'$.followUpRectifiedDate')),--removed the date formates.
--            FOLLOW_UP_TARGET_DATE=TO_TIMESTAMP(JSON_VALUE(i_json,'$.followUpTargetDate')),
            
--            FOLLOW_UP_RESPONSIBLE_OFFICER=JSON_VALUE(i_json,'$.followUpResponsibleOfficer'),
            
--            BR_COMMENT=i_brComment,
            FUR_COMMENT=i_furComment,
            QA_COMMENT=i_qacomment,
--            FOLLOW_UP_COMMENT=i_followComment,
            
            OVERALL_RISK_VALUE=JSON_VALUE(i_json,'$.overallRiskValue'),
            REPLY_FLAG=JSON_VALUE(i_json,'$.replyFlag'),
            OTHER_PROC_EXAMINE_DES=JSON_VALUE(i_json,'$.otherProcExamineDes')
            WHERE INCIDENT_ID=l_incident_id;
    
    -- Check if the row was updated
        IF SQL%ROWCOUNT > 0 THEN
            COMMIT;
            RETURN l_update_success;
        ELSE
            RETURN l_update_fail;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RETURN l_update_fail;
            
END UPDATE_AUDIT_INCIDENT_FROM_AUDIT;

FUNCTION ADD_RM_COMMENT (i_incident_id IN NUMBER , i_rm_comment IN BLOB)RETURN VARCHAR2 AS
add_status VARCHAR2(20);
  BEGIN
  
  UPDATE AUDIT_INCIDENT_TBL
    SET RM_COMMENT=i_rm_comment,
        BR_COMMENT_FLAG=1
    WHERE INCIDENT_ID = i_incident_id;
    
  IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully added: - ');
        COMMIT;
        add_status := 'SUCCESS';
    ELSE
        dbms_output.put_line('add failed: No rows affected');
        add_status := 'Fail to add RM comment';
    END IF;

    RETURN add_status;
  
  END ADD_RM_COMMENT;
  
  FUNCTION ADD_QA_COMMENT (i_incident_id IN NUMBER , i_qa_comment IN BLOB)RETURN VARCHAR2 AS
add_status VARCHAR2(20);
  BEGIN
  
  UPDATE AUDIT_INCIDENT_TBL
    SET QA_COMMENT=i_qa_comment
    WHERE INCIDENT_ID = i_incident_id;
    
  IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully added: - ');
        COMMIT;
        add_status := 'SUCCESS';
    ELSE
        dbms_output.put_line('add failed: No rows affected');
        add_status := 'fail to add QA comment';
    END IF;

    RETURN add_status;
  
  END ADD_QA_COMMENT;
  
  FUNCTION GET_INCIDENT_FOR_MAIN_CASE(i_main_case_id IN NUMBER)RETURN SYS_REFCURSOR AS
  v_incident_list SYS_REFCURSOR;
  BEGIN
  OPEN v_incident_list FOR
  SELECT * FROM AUDIT_INCIDENT_TBL WHERE MAIN_CASE_ID =i_main_case_id AND DEL_FLAG!=1;
  
  RETURN v_incident_list;
  
  END GET_INCIDENT_FOR_MAIN_CASE;
  
END INSIDENT_LIST_PACK;
/
create or replace PACKAGE REPORT_GENERATOR IS
  -- Declare the function to retrieve details
  FUNCTION RPTPG1_RETRIEVE_DETAILS(main_case_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG2_REPORT_SUMMERY (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG3_RISKCAL(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG3_RISKCALWEIGHT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG3_RISKCALRATE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG4_IMAGE_TABLE (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  
  FUNCTION RPTINSIDENTSFORDIV(CASE_ID IN NUMBER,i_user_div IN VARCHAR2) RETURN SYS_REFCURSOR;
  
  FUNCTION RPTINSTANCE_TABLE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
   FUNCTION RPTINSTANCE_TABLE_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTGETAUDITSTATUS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
--   FUNCTION RPTGETRM_COMMENT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;

  FUNCTION GET_DOCS_FOR_DIV(i_user_id IN VARCHAR2,i_main_case_id IN NUMBER,i_div_code IN VARCHAR2)RETURN SYS_REFCURSOR;
  FUNCTION REMOVE_DOCUMENT(I_docId IN VARCHAR2,i_user_id IN VARCHAR2)RETURN VARCHAR2;
--  FUNCTION GET_DOCS_FOR_AUDIT(i_user_id IN VARCHAR2,i_main_case_id IN NUMBER,i_div_code IN VARCHAR2)RETURN SYS_REFCURSOR;
END REPORT_GENERATOR;
/
create or replace PACKAGE BODY REPORT_GENERATOR IS
  -- Implement the function
  FUNCTION RPTPG1_RETRIEVE_DETAILS(main_case_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
  BEGIN
    OPEN cur FOR
      SELECT YEAR, AUDIT_DIV, AUDIT_DIV_DESC,OVERALL_AUDIT_STATUS
      FROM AUDIT_CASE_TBL
      WHERE DOC_CASE_ID = main_case_ID;

    RETURN cur;
  END RPTPG1_RETRIEVE_DETAILS;
  
  FUNCTION RPTPG2_REPORT_SUMMERY(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
  BEGIN
    OPEN cur1 FOR
    SELECT * FROM AUDIT_CASE_TBL ac INNER JOIN AUDIT_REPORT_SUMMARY rs ON ac.DOC_CASE_ID = rs.MAIN_CASE_ID 
    WHERE rs.MAIN_CASE_ID = CASE_ID;
     
     RETURN cur1;
  END RPTPG2_REPORT_SUMMERY;
  
   FUNCTION RPTPG3_RISKCAL(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
  BEGIN
  OPEN cur1 FOR
  select SUM(HR),SUM(IT),SUM(POLICIES_AND_PROCEDURE),SUM(PROCESS_AND_EXECUTION),SUM(PERFORMANCE_MEASUREMENT),A.OVERALL_RISK,A.AUDIT_SECTION
  from AUDIT_INCIDENT_TBL A
  INNER JOIN AUDIT_CASE_TBL B ON  A.MAIN_CASE_ID = B.DOC_CASE_ID
  INNER JOIN AUDIT_OVERALL_RISK_CAL_DETAILS C ON C.GENERATED_CODE = B.RISK_CAL_CODE
  WHERE A.MAIN_CASE_ID = CASE_ID AND A.FYI = 0 
  GROUP BY A.OVERALL_RISK,A.AUDIT_SECTION ;
     
     RETURN cur1;
  END RPTPG3_RISKCAL;
  
  FUNCTION RPTPG3_RISKCALWEIGHT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
  BEGIN
    OPEN cur1 FOR
       SELECT A.EXTREME_VAL,A.HIGH_VAL,A.LOW_VAL,A.MEDIUM_VAL 
FROM AUDIT_OVERALL_RISK_CAL_DETAILS A
JOIN AUDIT_CASE_TBL B ON B.RISK_CAL_CODE = A.GENERATED_CODE
WHERE B.DOC_CASE_ID = CASE_ID;
     RETURN cur1;
  END RPTPG3_RISKCALWEIGHT;
  
    FUNCTION RPTPG3_RISKCALRATE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
  BEGIN
    OPEN cur1 FOR
       SELECT *
FROM AUDIT_RISK_FACTOR_TBL A
INNER JOIN AUDIT_CASE_TBL B ON A.CAL_CODE = B.RISK_CAL_CODE
WHERE B.DOC_CASE_ID = CASE_ID;
     RETURN cur1;
  END RPTPG3_RISKCALRATE;
  
 FUNCTION RPTPG4_IMAGE_TABLE (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
      cur1 SYS_REFCURSOR;
      BEGIN
      OPEN cur1 FOR
    
      SELECT COMMENTS FROM AUDIT_FINANCIAL_HIGHLIGHTS fi 
      WHERE fi.MAIN_CASE_ID = CASE_ID;
    
      RETURN cur1;
END RPTPG4_IMAGE_TABLE;
  
FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
     BEGIN
    OPEN cur1 FOR
    
--    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,C.COMMENT_HEADING,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,C.IT
--    FROM AUDIT_CHILD_CASE_TBL A
--    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
--    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
--    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
--    WHERE (A.MAIN_CASE_ID = CASE_ID) AND C.FYI = 0 AND B.SECTION_AREA = 'OPERATIONS' AND A.YEAR = B.YEAR AND C.DEL_FLAG = 0 
--    
--    ORDER BY
--    D.MAIN_ID,D.SUB_ID,B.SECTION_DESCRIPTION,
--     
--     CASE 
--        WHEN C.OVERALL_RISK = 'High' THEN 1
--        WHEN C.OVERALL_RISK = 'Medium' THEN 2
--        WHEN C.OVERALL_RISK = 'Low' THEN 3
--    END;

SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,C.COMMENT_HEADING,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,C.IT,C.DEL_FLAG
    FROM AUDIT_CHILD_CASE_TBL A
    RIGHT JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    LEFT JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    LEFT JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = CASE_ID) AND B.SECTION_AREA = 'OPERATIONS' AND (C.DEL_FLAG != 1 OR C.DEL_FLAG is null) and (C.FYI = 0 OR C.FYI is null)
     ORDER BY
    D.MAIN_ID,D.SUB_ID,B.SECTION_DESCRIPTION,
     
     CASE 
        WHEN C.OVERALL_RISK = 'High' THEN 1
        WHEN C.OVERALL_RISK = 'Medium' THEN 2
        WHEN C.OVERALL_RISK = 'Low' THEN 3
    END
;
    

    
    RETURN cur1;
    
    END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS;
  
FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    
--    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,C.COMMENT_HEADING,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,it
--    FROM AUDIT_CHILD_CASE_TBL A
--    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
--    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
--    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
--    WHERE (A.MAIN_CASE_ID = CASE_ID) AND C.FYI = 0 AND B.SECTION_AREA = 'CREDIT' AND A.YEAR = B.YEAR AND C.DEL_FLAG = 0  
--    ORDER BY
--     D.MAIN_ID,D.SUB_ID,B.SECTION_DESCRIPTION,
--     CASE 
--        WHEN C.OVERALL_RISK = 'High' THEN 1
--        WHEN C.OVERALL_RISK = 'Medium' THEN 2
--        WHEN C.OVERALL_RISK = 'Low' THEN 3
--    END;

SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,C.COMMENT_HEADING,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,C.IT,C.DEL_FLAG
    FROM AUDIT_CHILD_CASE_TBL A
    RIGHT JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    LEFT JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    LEFT JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = CASE_ID) AND B.SECTION_AREA = 'CREDIT' AND (C.DEL_FLAG != 1 OR C.DEL_FLAG is null) and (C.FYI = 0 OR C.FYI is null)
     ORDER BY
    D.MAIN_ID,D.SUB_ID,B.SECTION_DESCRIPTION,
     
     CASE 
        WHEN C.OVERALL_RISK = 'High' THEN 1
        WHEN C.OVERALL_RISK = 'Medium' THEN 2
        WHEN C.OVERALL_RISK = 'Low' THEN 3
    END
;
    
    
    RETURN cur1;
END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT;

FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    
    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,C.COMMENT_HEADING,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,it
    FROM AUDIT_CHILD_CASE_TBL A
    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = CASE_ID) AND C.FYI = 1  AND A.YEAR = B.YEAR AND C.DEL_FLAG = 0 ;
    
    RETURN cur1;
END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI;

FUNCTION RPTINSTANCE_TABLE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    SELECT * 
    FROM AUDIT_INCIDENT_TBL A 
    JOIN AUDIT_CHECK_LIST_TBL B ON A.LAST_NODE_ID = B.NODE_ID AND A.LAST_NODE_ELEMENT_ORDER = B.NODE_ELEMENT_ORDER
    JOIN AUDIT_CHILD_CASE_TBL C ON A.CHILD_CASE_ID = C.CHILD_CASE_ID
    JOIN AUDIT_SECTION_TBL D ON D.PARENT_NODE = C.LAST_NODE_ID AND D.PARENT_NODE_ORDER=C.LAST_NODE_ELEMENT_ORDER AND D.YEAR = A.YEAR
    WHERE A.MAIN_CASE_ID = CASE_ID  AND A.FYI = 0 AND A.DEL_FLAG = 0 
    ORDER BY
     D.SECTION_DESCRIPTION,B.MAIN_ID,B.SUB_ID,
    CASE 
        WHEN A.AUDIT_SECTION = 'OPERATIONS' THEN 1
        WHEN A.AUDIT_SECTION = 'CREDIT' THEN 2
    END,
    CASE 
        WHEN A.OVERALL_RISK = 'High' THEN 1
        WHEN A.OVERALL_RISK = 'Medium' THEN 2
        WHEN A.OVERALL_RISK = 'Low' THEN 3
    END;
    
    RETURN cur1;
END  RPTINSTANCE_TABLE;

--Test Start---
FUNCTION RPTINSIDENTSFORDIV(CASE_ID IN NUMBER,i_user_div IN VARCHAR2) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    
    o_status VARCHAR2(5);
    BEGIN
    SELECT OVERALL_AUDIT_STATUS INTO o_status FROM AUDIT_CASE_TBL WHERE DOC_CASE_ID = CASE_ID;
    
    IF(i_user_div = '859' OR o_status='3' ) THEN 
      OPEN cur1 FOR
      SELECT * 
      FROM AUDIT_INCIDENT_TBL A 
      JOIN AUDIT_CHECK_LIST_TBL B ON A.LAST_NODE_ID = B.NODE_ID AND A.LAST_NODE_ELEMENT_ORDER = B.NODE_ELEMENT_ORDER
      JOIN AUDIT_CHILD_CASE_TBL C ON A.CHILD_CASE_ID = C.CHILD_CASE_ID
      JOIN AUDIT_SECTION_TBL D ON D.PARENT_NODE = C.LAST_NODE_ID AND D.PARENT_NODE_ORDER=C.LAST_NODE_ELEMENT_ORDER AND D.YEAR = A.YEAR
      WHERE A.MAIN_CASE_ID = CASE_ID  AND A.FYI = 0 AND A.DEL_FLAG = 0 and A.AUDIT_STATUS =1 
      ORDER BY
      B.MAIN_ID,B.SUB_ID,
      
      CASE 
          WHEN A.AUDIT_SECTION = 'OPERATIONS' THEN 1
          WHEN A.AUDIT_SECTION = 'CREDIT' THEN 2
      END,
      CASE 
          WHEN A.OVERALL_RISK = 'High' THEN 1
          WHEN A.OVERALL_RISK = 'Medium' THEN 2
          WHEN A.OVERALL_RISK = 'Low' THEN 3
      END;
    ELSE
      OPEN cur1 FOR
      SELECT * 
      FROM AUDIT_INCIDENT_TBL A 
      JOIN AUDIT_CHECK_LIST_TBL B ON A.LAST_NODE_ID = B.NODE_ID AND A.LAST_NODE_ELEMENT_ORDER = B.NODE_ELEMENT_ORDER
      JOIN AUDIT_CHILD_CASE_TBL C ON A.CHILD_CASE_ID = C.CHILD_CASE_ID
      JOIN AUDIT_SECTION_TBL D ON D.PARENT_NODE = C.LAST_NODE_ID AND D.PARENT_NODE_ORDER=C.LAST_NODE_ELEMENT_ORDER AND D.YEAR = A.YEAR
      WHERE A.MAIN_CASE_ID = CASE_ID  AND A.FYI = 0 AND A.DEL_FLAG = 0 AND A.INCIDENT_CURRENT_ASSIGNED_DIV = i_user_div  AND A.AUDIT_STATUS =1
      ORDER BY
       B.MAIN_ID,B.SUB_ID,
      CASE 
          WHEN A.AUDIT_SECTION = 'OPERATIONS' THEN 1
          WHEN A.AUDIT_SECTION = 'CREDIT' THEN 2
      END,
      CASE 
          WHEN A.OVERALL_RISK = 'High' THEN 1
          WHEN A.OVERALL_RISK = 'Medium' THEN 2
          WHEN A.OVERALL_RISK = 'Low' THEN 3
      END;
    
    END IF;
    RETURN cur1;
END  RPTINSIDENTSFORDIV;
--Test End---


FUNCTION RPTINSTANCE_TABLE_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    SELECT * 
    FROM AUDIT_INCIDENT_TBL A 
    JOIN AUDIT_CHECK_LIST_TBL B ON A.LAST_NODE_ID = B.NODE_ID AND A.LAST_NODE_ELEMENT_ORDER = B.NODE_ELEMENT_ORDER
    JOIN AUDIT_CHILD_CASE_TBL C ON A.CHILD_CASE_ID = C.CHILD_CASE_ID
    JOIN AUDIT_SECTION_TBL D ON D.PARENT_NODE = C.LAST_NODE_ID AND D.PARENT_NODE_ORDER=C.LAST_NODE_ELEMENT_ORDER AND D.YEAR = A.YEAR
    WHERE A.MAIN_CASE_ID = CASE_ID AND A.FYI = 1 AND A.DEL_FLAG = 0 AND A.AUDIT_STATUS =1
    ORDER BY
    B.MAIN_ID,B.SUB_ID,
    CASE 
        WHEN A.AUDIT_SECTION = 'OPERATIONS' THEN 1
        WHEN A.AUDIT_SECTION = 'CREDIT' THEN 2
    END,
    CASE 
        WHEN A.OVERALL_RISK = 'High' THEN 1
        WHEN A.OVERALL_RISK = 'Medium' THEN 2
        WHEN A.OVERALL_RISK = 'Low' THEN 3
    END;
    
    RETURN cur1;
END  RPTINSTANCE_TABLE_FYI;




  FUNCTION RPTGETAUDITSTATUS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    SELECT A.OVERALL_AUDIT_STATUS
    FROM AUDIT_CASE_TBL A
    WHERE A.DOC_CASE_ID = CASE_ID;
    RETURN cur1;
END  RPTGETAUDITSTATUS;


FUNCTION GET_DOCS_FOR_DIV(i_user_id IN VARCHAR2,i_main_case_id IN NUMBER,i_div_code IN VARCHAR2)RETURN SYS_REFCURSOR AS
  cur1 SYS_REFCURSOR;
  BEGIN
  IF (i_div_code=859)THEN
    OPEN cur1 FOR
    SELECT * FROM AUDIT_DOC_TBL
    WHERE  DOC_CASE_ID=i_main_case_id AND Del_Flag!=1 ORDER BY Doc_Img_Created_Date DESC;
  ELSE
    OPEN cur1 FOR
    SELECT * FROM AUDIT_DOC_TBL
    WHERE  DOC_CASE_ID=i_main_case_id AND Del_Flag!=1 AND ENABLE_FOR_BR!=1 ORDER BY Doc_Img_Created_Date DESC;
  END IF;
    
    RETURN cur1;

END GET_DOCS_FOR_DIV;

FUNCTION REMOVE_DOCUMENT(I_docId IN VARCHAR2,i_user_id IN VARCHAR2)RETURN VARCHAR2 AS
O_result VARCHAR2(500);
r_created_user VARCHAR2(8 BYTE);
BEGIN
  SELECT DOC_IMG_CREATED_USER INTO r_created_user FROM AUDIT_DOC_TBL WHERE SWEBFS_DOC_IMG_ID = I_docId;

  IF(i_user_id=r_created_user)THEN
    UPDATE AUDIT_DOC_TBL SET Del_Flag=1 WHERE SWEBFS_DOC_IMG_ID =I_docId;
    COMMIT;
    O_result:='SUCCESS';
  ELSE
    O_result:='Delete fail This file was not created by you';
  END IF;
  
  RETURN O_result;

END REMOVE_DOCUMENT;

--  FUNCTION GET_DOCS_FOR_AUDIT(i_user_id IN VARCHAR2,i_main_case_id IN NUMBER,i_div_code IN VARCHAR2)RETURN SYS_REFCURSOR AS
--  cur1 SYS_REFCURSOR;
--  BEGIN
--    OPEN cur1 FOR
--    SELECT * FROM AUDIT_DOC_TBL
--    WHERE DOC_IMG_CREATED_USER=i_user_id AND DOC_CASE_ID=i_main_case_id ;
--    
--    RETURN cur1;
--
--END GET_DOCS_FOR_AUDIT;

--
--FUNCTION RPTGETRM_COMMENT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
--    cur1 SYS_REFCURSOR;
--    BEGIN
--    OPEN cur1 FOR
--    
--    SELECT 
--    
--    RETURN cur1;
--END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI;






END REPORT_GENERATOR;
/