create or replace PACKAGE AUDIT_CASE_PACK AS 

  FUNCTION GET_AUDIT_SEARCH_DATA(s_audit_area IN VARCHAR2, s_audit_mode IN VARCHAR2,s_year IN NUMBER,s_overall_audit_status IN VARCHAR2)RETURN AUDIT_CASE_TYPE_LIST;
  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  FUNCTION GET_SEARCHED_AUDIT_CASE (s_audit_area IN VARCHAR2, s_audit_mode IN VARCHAR2,s_year IN NUMBER,s_overall_audit_status IN VARCHAR2,s_audit_div IN VARCHAR2) RETURN AUDIT_CASE_TYPE_LIST;
--  FUNCTION GET_SEARCH
END AUDIT_CASE_PACK;

/

create or replace PACKAGE BODY AUDIT_CASE_PACK AS

  FUNCTION GET_AUDIT_SEARCH_DATA(s_audit_area IN VARCHAR2, s_audit_mode IN VARCHAR2,s_year IN NUMBER,s_overall_audit_status IN VARCHAR2)RETURN AUDIT_CASE_TYPE_LIST AS
  CURSOR MAIN_CASE_CUR IS
    SELECT * FROM AUDIT_CASE_TBL WHERE AUDIT_AREA=s_audit_area AND AUDIT_MODE=s_audit_mode AND YEAR=s_year;
  
  CURSOR MAIN_CASE_WITH_STATUS_CUR IS
    SELECT * FROM AUDIT_CASE_TBL WHERE AUDIT_AREA=s_audit_area AND AUDIT_MODE=s_audit_mode AND YEAR=s_year AND OVERALL_AUDIT_STATUS=s_overall_audit_status;
  
   CURSOR MAIN_CASE_WITH_WITH_CUR IS
    SELECT * FROM AUDIT_CASE_TBL WHERE AUDIT_AREA=s_audit_area AND AUDIT_MODE=s_audit_mode AND YEAR=s_year AND OVERALL_AUDIT_STATUS=s_overall_audit_status;
  
    AUDIT_CASE_LIST AUDIT_CASE_TYPE_LIST;
    AUDIT_CASE AUDIT_CASE_TYPE;
    
  BEGIN
  
--  DBMS_OUTPUT.PUT_LINE(MAIN_CASE_CUR);
--    DBMS_OUTPUT.PUT_LINE('audit_area' || audit_area);
--    DBMS_OUTPUT.PUT_LINE('audit_mode' || audit_mode);
--    DBMS_OUTPUT.PUT_LINE('overall_audit_status' || overall_audit_status);

    
    
    
  
    AUDIT_CASE_LIST:=NEW AUDIT_CASE_TYPE_LIST();
    
    IF(s_overall_audit_status IS NULL) THEN
      FOR MAIN_CASE_CUR_REC IN MAIN_CASE_CUR LOOP
        AUDIT_CASE:=NEW AUDIT_CASE_TYPE(0,null,'',0,'',null,'',0,0,'',0,0,'',0,null,'','','','',0,null,null,null,null,'','','','','');
        
        AUDIT_CASE.DOC_CASE_ID := MAIN_CASE_CUR_REC.DOC_CASE_ID;
        AUDIT_CASE.CASE_CREATED_DATE := MAIN_CASE_CUR_REC.CASE_CREATED_DATE;
        AUDIT_CASE.CASE_CREATED_USER := MAIN_CASE_CUR_REC.CASE_CREATED_USER;
        AUDIT_CASE.CASE_LAST_ACTION_STATUS := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_STATUS;
       
        AUDIT_CASE.CASE_SPECIAL_COMMENT_VARCHAR := MAIN_CASE_CUR_REC.CASE_SPECIAL_COMMENT_VARCHAR;
        AUDIT_CASE.CASE_LAST_ACTION_DATE := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_DATE;
        AUDIT_CASE.CASE_LAST_ACTION_USER := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_USER;
        AUDIT_CASE.CASE_LAST_ACTION_USER_LEVEL := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_USER_LEVEL;
        
        AUDIT_CASE.LAST_NODE_ID := MAIN_CASE_CUR_REC.LAST_NODE_ID;
        AUDIT_CASE.CASE_CREATED_DIV := MAIN_CASE_CUR_REC.CASE_CREATED_DIV;
        AUDIT_CASE.LAST_NODE_ELEMENT_ORDER := MAIN_CASE_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_CASE.CASE_CREATED_USER_LEVEL := MAIN_CASE_CUR_REC.CASE_CREATED_USER_LEVEL;
        
        AUDIT_CASE.CURRENT_ASSIGNED_USER := MAIN_CASE_CUR_REC.CURRENT_ASSIGNED_USER;
        AUDIT_CASE.CURRENT_ASSIGNED_USER_LEVEL := MAIN_CASE_CUR_REC.CURRENT_ASSIGNED_USER_LEVEL;
        AUDIT_CASE.CASE_SPECIAL_COMMENT := MAIN_CASE_CUR_REC.CASE_SPECIAL_COMMENT;
        AUDIT_CASE.CASE_RESPONSIBLE_USER := MAIN_CASE_CUR_REC.CASE_RESPONSIBLE_USER;
        
        AUDIT_CASE.AUDIT_AREA := MAIN_CASE_CUR_REC.AUDIT_AREA;
        AUDIT_CASE.RISK_CAL_CODE := MAIN_CASE_CUR_REC.RISK_CAL_CODE;
        AUDIT_CASE.AUDIT_MODE := MAIN_CASE_CUR_REC.AUDIT_MODE;
        AUDIT_CASE.YEAR := MAIN_CASE_CUR_REC.YEAR;
        
        AUDIT_CASE.COVER_FROM := MAIN_CASE_CUR_REC.COVER_FROM;
        AUDIT_CASE.COVER_TO := MAIN_CASE_CUR_REC.COVER_TO;
        AUDIT_CASE.EXAM_PERIOD_FROM := MAIN_CASE_CUR_REC.EXAM_PERIOD_FROM;
        AUDIT_CASE.EXAM_PERIOD_TO := MAIN_CASE_CUR_REC.EXAM_PERIOD_TO;
        
        AUDIT_CASE.AUDIT_DIV := MAIN_CASE_CUR_REC.AUDIT_DIV;
        AUDIT_CASE.CURRENT_ASSIGN_USER_NAME := MAIN_CASE_CUR_REC.CURRENT_ASSIGN_USER_NAME;
        AUDIT_CASE.CREATED_USER_NAME := MAIN_CASE_CUR_REC.CREATED_USER_NAME;
        AUDIT_CASE.AUDIT_DIV_DESC := MAIN_CASE_CUR_REC.AUDIT_DIV_DESC;
        AUDIT_CASE.OVERALL_AUDIT_STATUS := MAIN_CASE_CUR_REC.OVERALL_AUDIT_STATUS;
        
        DBMS_OUTPUT.PUT_LINE('overall_audit_status' || MAIN_CASE_CUR_REC.OVERALL_AUDIT_STATUS);
    
        
        ---OTHER DATA GOSE HERE--
        
        AUDIT_CASE_LIST.EXTEND;
        AUDIT_CASE_LIST(AUDIT_CASE_LIST.LAST):=AUDIT_CASE;
        
      END LOOP;
    ELSE
        FOR MAIN_CASE_WITH_STATUS_CUR_REC IN MAIN_CASE_WITH_STATUS_CUR LOOP
          AUDIT_CASE:=NEW AUDIT_CASE_TYPE(0,null,'',0,'',null,'',0,0,'',0,0,'',0,null,'','','','',0,null,null,null,null,'','','','','');

          AUDIT_CASE.DOC_CASE_ID := MAIN_CASE_WITH_STATUS_CUR_REC.DOC_CASE_ID;
          AUDIT_CASE.CASE_CREATED_DATE := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_CREATED_DATE;
          AUDIT_CASE.CASE_CREATED_USER := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_CREATED_USER;
          AUDIT_CASE.CASE_LAST_ACTION_STATUS := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_LAST_ACTION_STATUS;
          
          AUDIT_CASE.CASE_SPECIAL_COMMENT_VARCHAR := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_SPECIAL_COMMENT_VARCHAR;
          AUDIT_CASE.CASE_LAST_ACTION_DATE := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_LAST_ACTION_DATE;
          AUDIT_CASE.CASE_LAST_ACTION_USER := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_LAST_ACTION_USER;
          AUDIT_CASE.CASE_LAST_ACTION_USER_LEVEL := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_LAST_ACTION_USER_LEVEL;
          AUDIT_CASE.LAST_NODE_ID := MAIN_CASE_WITH_STATUS_CUR_REC.LAST_NODE_ID;
          
          AUDIT_CASE.CASE_CREATED_DIV := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_CREATED_DIV;
          AUDIT_CASE.LAST_NODE_ELEMENT_ORDER := MAIN_CASE_WITH_STATUS_CUR_REC.LAST_NODE_ELEMENT_ORDER;
          AUDIT_CASE.CASE_CREATED_USER_LEVEL := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_CREATED_USER_LEVEL;
          AUDIT_CASE.CURRENT_ASSIGNED_USER := MAIN_CASE_WITH_STATUS_CUR_REC.CURRENT_ASSIGNED_USER;
          AUDIT_CASE.CURRENT_ASSIGNED_USER_LEVEL := MAIN_CASE_WITH_STATUS_CUR_REC.CURRENT_ASSIGNED_USER_LEVEL;
          
          AUDIT_CASE.CASE_SPECIAL_COMMENT := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_SPECIAL_COMMENT;
          AUDIT_CASE.CASE_RESPONSIBLE_USER := MAIN_CASE_WITH_STATUS_CUR_REC.CASE_RESPONSIBLE_USER;
          AUDIT_CASE.AUDIT_AREA := MAIN_CASE_WITH_STATUS_CUR_REC.AUDIT_AREA;
          AUDIT_CASE.RISK_CAL_CODE := MAIN_CASE_WITH_STATUS_CUR_REC.RISK_CAL_CODE;
          
          AUDIT_CASE.AUDIT_MODE := MAIN_CASE_WITH_STATUS_CUR_REC.AUDIT_MODE;
          AUDIT_CASE.YEAR := MAIN_CASE_WITH_STATUS_CUR_REC.YEAR;
          AUDIT_CASE.COVER_FROM := MAIN_CASE_WITH_STATUS_CUR_REC.COVER_FROM;
          AUDIT_CASE.COVER_TO := MAIN_CASE_WITH_STATUS_CUR_REC.COVER_TO;
          
          AUDIT_CASE.EXAM_PERIOD_FROM := MAIN_CASE_WITH_STATUS_CUR_REC.EXAM_PERIOD_FROM;
          AUDIT_CASE.EXAM_PERIOD_TO := MAIN_CASE_WITH_STATUS_CUR_REC.EXAM_PERIOD_TO;
          AUDIT_CASE.AUDIT_DIV := MAIN_CASE_WITH_STATUS_CUR_REC.AUDIT_DIV;
          AUDIT_CASE.CURRENT_ASSIGN_USER_NAME := MAIN_CASE_WITH_STATUS_CUR_REC.CURRENT_ASSIGN_USER_NAME;
          
          AUDIT_CASE.CREATED_USER_NAME := MAIN_CASE_WITH_STATUS_CUR_REC.CREATED_USER_NAME;
          AUDIT_CASE.AUDIT_DIV_DESC := MAIN_CASE_WITH_STATUS_CUR_REC.AUDIT_DIV_DESC;
          AUDIT_CASE.OVERALL_AUDIT_STATUS := MAIN_CASE_WITH_STATUS_CUR_REC.OVERALL_AUDIT_STATUS;
          
          DBMS_OUTPUT.PUT_LINE('overall_audit_status' || MAIN_CASE_WITH_STATUS_CUR_REC.OVERALL_AUDIT_STATUS);
      
          AUDIT_CASE_LIST.EXTEND;
          AUDIT_CASE_LIST(AUDIT_CASE_LIST.LAST) := AUDIT_CASE;
    
        END LOOP;
    END IF;
    -- TODO: Implementation required for FUNCTION AUDIT_CASE_PACK.GET_AUDIT_SEARCH_DATA
    RETURN AUDIT_CASE_LIST;
  END GET_AUDIT_SEARCH_DATA;
  
  
  
FUNCTION GET_SEARCHED_AUDIT_CASE (s_audit_area IN VARCHAR2, s_audit_mode IN VARCHAR2,s_year IN NUMBER,s_overall_audit_status IN VARCHAR2,s_audit_div IN VARCHAR2) RETURN AUDIT_CASE_TYPE_LIST AS
  CURSOR MAIN_CASE_CUR IS
    SELECT *
    FROM AUDIT_CASE_TBL
    WHERE AUDIT_AREA = s_audit_area
    AND AUDIT_MODE = s_audit_mode
    AND YEAR = s_year
    AND (s_overall_audit_status IS NULL OR OVERALL_AUDIT_STATUS = s_overall_audit_status)
    AND (s_audit_div IS NULL OR AUDIT_DIV = s_audit_div);
    
    AUDIT_CASE_LIST AUDIT_CASE_TYPE_LIST;
    AUDIT_CASE AUDIT_CASE_TYPE;
BEGIN

  AUDIT_CASE_LIST := AUDIT_CASE_TYPE_LIST();
   FOR MAIN_CASE_CUR_REC IN MAIN_CASE_CUR LOOP
        AUDIT_CASE:=NEW AUDIT_CASE_TYPE(0,null,'',0,'',null,'',0,0,'',0,0,'',0,null,'','','','',0,null,null,null,null,'','','','','');
        
        AUDIT_CASE.DOC_CASE_ID := MAIN_CASE_CUR_REC.DOC_CASE_ID;
        AUDIT_CASE.CASE_CREATED_DATE := MAIN_CASE_CUR_REC.CASE_CREATED_DATE;
        AUDIT_CASE.CASE_CREATED_USER := MAIN_CASE_CUR_REC.CASE_CREATED_USER;
        AUDIT_CASE.CASE_LAST_ACTION_STATUS := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_STATUS;
       
        AUDIT_CASE.CASE_SPECIAL_COMMENT_VARCHAR := MAIN_CASE_CUR_REC.CASE_SPECIAL_COMMENT_VARCHAR;
        AUDIT_CASE.CASE_LAST_ACTION_DATE := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_DATE;
        AUDIT_CASE.CASE_LAST_ACTION_USER := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_USER;
        AUDIT_CASE.CASE_LAST_ACTION_USER_LEVEL := MAIN_CASE_CUR_REC.CASE_LAST_ACTION_USER_LEVEL;
        
        AUDIT_CASE.LAST_NODE_ID := MAIN_CASE_CUR_REC.LAST_NODE_ID;
        AUDIT_CASE.CASE_CREATED_DIV := MAIN_CASE_CUR_REC.CASE_CREATED_DIV;
        AUDIT_CASE.LAST_NODE_ELEMENT_ORDER := MAIN_CASE_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_CASE.CASE_CREATED_USER_LEVEL := MAIN_CASE_CUR_REC.CASE_CREATED_USER_LEVEL;
        
        AUDIT_CASE.CURRENT_ASSIGNED_USER := MAIN_CASE_CUR_REC.CURRENT_ASSIGNED_USER;
        AUDIT_CASE.CURRENT_ASSIGNED_USER_LEVEL := MAIN_CASE_CUR_REC.CURRENT_ASSIGNED_USER_LEVEL;
        AUDIT_CASE.CASE_SPECIAL_COMMENT := MAIN_CASE_CUR_REC.CASE_SPECIAL_COMMENT;
        AUDIT_CASE.CASE_RESPONSIBLE_USER := MAIN_CASE_CUR_REC.CASE_RESPONSIBLE_USER;
        
        AUDIT_CASE.AUDIT_AREA := MAIN_CASE_CUR_REC.AUDIT_AREA;
        AUDIT_CASE.RISK_CAL_CODE := MAIN_CASE_CUR_REC.RISK_CAL_CODE;
        AUDIT_CASE.AUDIT_MODE := MAIN_CASE_CUR_REC.AUDIT_MODE;
        AUDIT_CASE.YEAR := MAIN_CASE_CUR_REC.YEAR;
        
        AUDIT_CASE.COVER_FROM := MAIN_CASE_CUR_REC.COVER_FROM;
        AUDIT_CASE.COVER_TO := MAIN_CASE_CUR_REC.COVER_TO;
        AUDIT_CASE.EXAM_PERIOD_FROM := MAIN_CASE_CUR_REC.EXAM_PERIOD_FROM;
        AUDIT_CASE.EXAM_PERIOD_TO := MAIN_CASE_CUR_REC.EXAM_PERIOD_TO;
        
        AUDIT_CASE.AUDIT_DIV := MAIN_CASE_CUR_REC.AUDIT_DIV;
        AUDIT_CASE.CURRENT_ASSIGN_USER_NAME := MAIN_CASE_CUR_REC.CURRENT_ASSIGN_USER_NAME;
        AUDIT_CASE.CREATED_USER_NAME := MAIN_CASE_CUR_REC.CREATED_USER_NAME;
        AUDIT_CASE.AUDIT_DIV_DESC := MAIN_CASE_CUR_REC.AUDIT_DIV_DESC;
        AUDIT_CASE.OVERALL_AUDIT_STATUS := MAIN_CASE_CUR_REC.OVERALL_AUDIT_STATUS;
        
        DBMS_OUTPUT.PUT_LINE('overall_audit_status' || MAIN_CASE_CUR_REC.OVERALL_AUDIT_STATUS);
    
        
        ---OTHER DATA GOSE HERE--
        
        AUDIT_CASE_LIST.EXTEND;
        AUDIT_CASE_LIST(AUDIT_CASE_LIST.LAST):=AUDIT_CASE;
        
    END LOOP;
  
  RETURN AUDIT_CASE_LIST;
END GET_SEARCHED_AUDIT_CASE;

END AUDIT_CASE_PACK;

/


create or replace PACKAGE AUDIT_FORWARD_PACK AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
FUNCTION FORWARD_MAIN_AUDIT (I_CURR_ASSIGN_USER IN VARCHAR2, I_CURR_ASSIGN_USER_LEVEL NUMBER,I_MAIN_CASE_ID NUMBER,I_LOGGED_USER IN VARCHAR2,I_LOGGED_USER_DIV IN NUMBER,I_FORWARD_COM IN BLOB,I_COMMENT_TYPE IN VARCHAR2) RETURN VARCHAR2;
FUNCTION GET_ACTION_LOG_MAIN_AUDIT (I_MAIN_CASE_ID NUMBER) RETURN AUDIT_COMMENT_TYPE_LIST;
FUNCTION FORWARD_INCIDENTS(I_CURR_ASSIGN_USER IN VARCHAR2, I_CURR_ASSIGN_USER_LEVEL NUMBER,I_MAIN_CASE_ID NUMBER,I_LOGGED_USER IN VARCHAR2,I_LOGGED_USER_DIV IN NUMBER,I_FORWARD_COM IN BLOB,I_COMMENT_TYPE IN VARCHAR2,I_IDS IN NUMBER,I_CURRENT_ASSIGN_USER_DIV IN VARCHAR2) RETURN VARCHAR2;
 
END AUDIT_FORWARD_PACK;

/


create or replace PACKAGE BODY AUDIT_FORWARD_PACK AS
  FUNCTION FORWARD_MAIN_AUDIT (I_CURR_ASSIGN_USER IN VARCHAR2, I_CURR_ASSIGN_USER_LEVEL NUMBER,I_MAIN_CASE_ID NUMBER,I_LOGGED_USER IN VARCHAR2,I_LOGGED_USER_DIV IN NUMBER,I_FORWARD_COM IN BLOB,I_COMMENT_TYPE IN VARCHAR2) RETURN VARCHAR2 AS
    forwardStatus VARCHAR2(10) := ''; 
    BEGIN
    
    UPDATE AUDIT_CASE_TBL SET CASE_LAST_ACTION_STATUS=1, CURRENT_ASSIGNED_USER = I_CURR_ASSIGN_USER , CURRENT_ASSIGNED_USER_LEVEL = I_CURR_ASSIGN_USER_LEVEL,CASE_LAST_ACTION_USER=I_LOGGED_USER -- need to add case last action user level also
    WHERE DOC_CASE_ID =I_MAIN_CASE_ID;
    
    UPDATE AUDIT_CHILD_CASE_TBL SET CASE_LAST_ACTION_STATUS=1, CASE_LAST_ACTION_DATE=sysdate, CASE_LAST_ACTION_USER=I_LOGGED_USER ,CURRENT_ASSIGNED_USER=I_CURR_ASSIGN_USER,CURRENT_ASSIGNED_USER_LEVEL=I_CURR_ASSIGN_USER_LEVEL,CASE_RESPONSIBLE_USER=I_CURR_ASSIGN_USER
    WHERE MAIN_CASE_ID=I_MAIN_CASE_ID;
    
    --INSERT INTO AUDIT_COMMENT_TBL (MAIN_CASE_ID,COMMENT_TYPE,COMMENT_USER_ID,COMMENT_USER_DIV,AUDIT_COMMENT,COMMENT_DATE) VALUES (I_MAIN_CASE_ID,'type 1','1234','029','',sysdate);
   -- commit;
     dbms_output.put_line('Sucessfully sqlrowcount : - ' || sql%rowcount);
   if sql%rowcount > 0 then
   dbms_output.put_line('Successfully update : - ');
   
    INSERT INTO AUDIT_COMMENT_TBL (MAIN_CASE_ID,COMMENT_TYPE,COMMENT_USER_ID,COMMENT_USER_DIV,AUDIT_COMMENT,COMMENT_DATE,NEXT_USER,ACTION) VALUES (I_MAIN_CASE_ID,I_COMMENT_TYPE,I_LOGGED_USER,I_LOGGED_USER_DIV,I_FORWARD_COM,sysdate,I_CURR_ASSIGN_USER,1);
   
   commit;
    forwardStatus := '1'; 
   ELSE
   dbms_output.put_line('Successfully FAIL : - '  );
   forwardStatus := '0';
  end if;
    
    
    RETURN forwardStatus;
  END FORWARD_MAIN_AUDIT;
  
   FUNCTION GET_ACTION_LOG_MAIN_AUDIT (I_MAIN_CASE_ID NUMBER) RETURN AUDIT_COMMENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS
    
    SELECT MAIN_CASE_ID,COMMENT_TYPE,COMMENT_USER_ID,COMMENT_USER_DIV,AUDIT_COMMENT,COMMENT_DATE,NEXT_USER,ACTION
    FROM AUDIT_COMMENT_TBL
    WHERE MAIN_CASE_ID=I_MAIN_CASE_ID ORDER BY COMMENT_DATE DESC;
    
     acl AUDIT_COMMENT_TYPE_LIST;
     ac AUDIT_COMMENT_TYPE;
    BEGIN
      acl := NEW AUDIT_COMMENT_TYPE_LIST();
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        ac := NEW AUDIT_COMMENT_TYPE (0,'','','',null,null,0,'');
        ac.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        ac.COMMENT_TYPE := MAIN_CUR_REC.COMMENT_TYPE;
        ac.COMMENT_USER_ID := MAIN_CUR_REC.COMMENT_USER_ID;
        ac.COMMENT_USER_DIV := MAIN_CUR_REC.COMMENT_USER_DIV;
        ac.AUDIT_COMMENT := MAIN_CUR_REC.AUDIT_COMMENT;
        ac.COMMENT_DATE := MAIN_CUR_REC.COMMENT_DATE;
        ac.NEXT_USER := MAIN_CUR_REC.NEXT_USER;
        ac.ACTION := MAIN_CUR_REC.ACTION;
        
        acl.EXTEND;
        acl(acl.LAST):=ac;
      
      END LOOP;
    RETURN acl;
  END GET_ACTION_LOG_MAIN_AUDIT;
  
  FUNCTION FORWARD_INCIDENTS (I_CURR_ASSIGN_USER IN VARCHAR2, I_CURR_ASSIGN_USER_LEVEL NUMBER,I_MAIN_CASE_ID NUMBER,I_LOGGED_USER IN VARCHAR2,I_LOGGED_USER_DIV IN NUMBER,I_FORWARD_COM IN BLOB,I_COMMENT_TYPE IN VARCHAR2,I_IDS IN NUMBER,I_CURRENT_ASSIGN_USER_DIV IN VARCHAR2) RETURN VARCHAR2 AS
    forwardStatus VARCHAR2(10) := ''; 
    
    BEGIN
    
    UPDATE AUDIT_CASE_TBL SET CASE_LAST_ACTION_STATUS=1, CURRENT_ASSIGNED_USER = I_CURR_ASSIGN_USER , CURRENT_ASSIGNED_USER_LEVEL = I_CURR_ASSIGN_USER_LEVEL,CASE_LAST_ACTION_USER=I_LOGGED_USER -- need to add case last action user level also
    WHERE DOC_CASE_ID =I_MAIN_CASE_ID;
    
    UPDATE AUDIT_CHILD_CASE_TBL SET CASE_LAST_ACTION_STATUS=1, CASE_LAST_ACTION_DATE=sysdate, CASE_LAST_ACTION_USER=I_LOGGED_USER ,CASE_RESPONSIBLE_USER=I_CURR_ASSIGN_USER
    WHERE MAIN_CASE_ID=I_MAIN_CASE_ID;
    
    UPDATE AUDIT_INCIDENT_TBL
    SET INCIDENT_CURRENT_ASSIGNED_USER = I_CURR_ASSIGN_USER
    WHERE INCIDENT_ID = I_IDS;
    
    UPDATE AUDIT_INCIDENT_TBL
    SET BR_COMMENT_FLAG=0;
    
    UPDATE AUDIT_INCIDENT_TBL
    SET INCIDENT_CURRENT_ASSIGNED_DIV = I_CURRENT_ASSIGN_USER_DIV
    WHERE INCIDENT_ID = I_IDS;
    
     dbms_output.put_line('Sucessfully sqlrowcount : - ' || sql%rowcount);
   if sql%rowcount > 0 then
   dbms_output.put_line('Successfully update : - ');
   
    INSERT INTO AUDIT_COMMENT_TBL (MAIN_CASE_ID,COMMENT_TYPE,COMMENT_USER_ID,COMMENT_USER_DIV,AUDIT_COMMENT,COMMENT_DATE,NEXT_USER,ACTION) VALUES (I_MAIN_CASE_ID,I_COMMENT_TYPE,I_LOGGED_USER,I_LOGGED_USER_DIV,I_FORWARD_COM,sysdate,I_CURR_ASSIGN_USER,1);
   
   commit;
    forwardStatus := '1'; 
   ELSE
   dbms_output.put_line('Successfully FAIL : - '  );
   forwardStatus := '0';
  end if;
    
    
    RETURN forwardStatus;
  END FORWARD_INCIDENTS;
END AUDIT_FORWARD_PACK;

/

create or replace PACKAGE AUDIT_INSIDENT_COMMENT_PACK AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  FUNCTION ADD_INSIDENT_COMMENT (I_MAIN_CASE_ID NUMBER,I_CHILD_CASE_ID NUMBER,I_INSIDENT_ID NUMBER,I_COMMENT_USER_TYPE VARCHAR2,I_COMMENT_USER_ID VARCHAR2,I_COMMENT_USER_DIV VARCHAR2,I_INSIDENT_COMMENT BLOB,I_AGREE_WITH_AUDIT NUMBER,I_RESPONSIBLE_OFFICER VARCHAR2,I_RECTIFIED NUMBER,I_RECTIFY_DATE VARCHAR2,I_TARGET_DATE VARCHAR2) RETURN VARCHAR2;
  FUNCTION VIEW_INCIDENT_COMMENT (I_MAIN_CASE_ID NUMBER,I_CHILD_CASE_ID NUMBER,I_INSIDENT_ID NUMBER) RETURN INCIDENT_COMMENT_LIST;
 
END AUDIT_INSIDENT_COMMENT_PACK;

/
create or replace PACKAGE BODY AUDIT_INSIDENT_COMMENT_PACK AS

  FUNCTION ADD_INSIDENT_COMMENT (I_MAIN_CASE_ID NUMBER,I_CHILD_CASE_ID NUMBER,I_INSIDENT_ID NUMBER,I_COMMENT_USER_TYPE VARCHAR2,I_COMMENT_USER_ID VARCHAR2,I_COMMENT_USER_DIV VARCHAR2,I_INSIDENT_COMMENT BLOB,I_AGREE_WITH_AUDIT NUMBER,I_RESPONSIBLE_OFFICER VARCHAR2,I_RECTIFIED NUMBER,I_RECTIFY_DATE VARCHAR2,I_TARGET_DATE VARCHAR2) RETURN VARCHAR2 AS
    forwardStatus VARCHAR2(10) := ''; 
    BEGIN
    
  INSERT INTO "AUDIT_INSIDENT_COMMENT_TBL" (MAIN_CASE_ID, CHILD_CASE_ID, INSIDENT_ID, COMMENT_USER_TYPE, COMMENT_USER_ID, COMMENT_USER_DIV, AGREE_WITH_AUDIT, RESPONSIBLE_OFFICER, RECTIFIED, RECTIFY_DATE, TARGET_DATE,INSIDENT_COMMENT,COMMENT_ADDED_DATE) 
  VALUES (I_MAIN_CASE_ID, I_CHILD_CASE_ID, I_INSIDENT_ID, I_COMMENT_USER_TYPE, I_COMMENT_USER_ID, I_COMMENT_USER_DIV, I_AGREE_WITH_AUDIT, I_RESPONSIBLE_OFFICER, I_RECTIFIED, TO_TIMESTAMP(I_RECTIFY_DATE), TO_TIMESTAMP(I_TARGET_DATE),I_INSIDENT_COMMENT,sysdate);

  UPDATE AUDIT_INCIDENT_TBL
        SET BR_COMMENT_FLAG=1
        WHERE INCIDENT_ID=I_INSIDENT_ID;

--  commit;
     dbms_output.put_line('Sucessfully 123 : - ' || sql%rowcount);
    if sql%rowcount > 0 then
   dbms_output.put_line('Sucessfully INSERT : - ');
   commit;
    forwardStatus := 'SUCESS'; 
   ELSE
   dbms_output.put_line('Sucessfully FAIL : - '  );
   forwardStatus := 'FAIL';
  end if;
    
    
    RETURN forwardStatus;
  END ADD_INSIDENT_COMMENT;
  
  FUNCTION VIEW_INCIDENT_COMMENT (I_MAIN_CASE_ID NUMBER,I_CHILD_CASE_ID NUMBER,I_INSIDENT_ID NUMBER) RETURN INCIDENT_COMMENT_LIST AS
    CURSOR MAIN_CUR IS
    
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INSIDENT_ID,COMMENT_USER_TYPE,COMMENT_USER_ID,COMMENT_USER_DIV,INSIDENT_COMMENT,AGREE_WITH_AUDIT,RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,TARGET_DATE,COMMENT_ADDED_DATE
    FROM AUDIT_INSIDENT_COMMENT_TBL
    WHERE MAIN_CASE_ID=I_MAIN_CASE_ID AND CHILD_CASE_ID=I_CHILD_CASE_ID AND INSIDENT_ID=I_INSIDENT_ID;
    
     iclist INCIDENT_COMMENT_LIST;
     ic INCIDENT_COMMENT;
    BEGIN
      iclist := NEW INCIDENT_COMMENT_LIST();
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        ic := NEW INCIDENT_COMMENT (0,0,0,'','','',null,0,'',0,null,null,null);
        ic.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        ic.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        ic.INSIDENT_ID := MAIN_CUR_REC.INSIDENT_ID;
        ic.COMMENT_USER_TYPE := MAIN_CUR_REC.COMMENT_USER_TYPE;
        ic.COMMENT_USER_ID := MAIN_CUR_REC.COMMENT_USER_ID;
        ic.COMMENT_USER_DIV := MAIN_CUR_REC.COMMENT_USER_DIV;
        ic.INSIDENT_COMMENT := MAIN_CUR_REC.INSIDENT_COMMENT;
        ic.AGREE_WITH_AUDIT := MAIN_CUR_REC.AGREE_WITH_AUDIT;
        ic.RESPONSIBLE_OFFICER := MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        ic.RECTIFIED := MAIN_CUR_REC.RECTIFIED;
        ic.RECTIFY_DATE := MAIN_CUR_REC.RECTIFY_DATE;
        ic.TARGET_DATE := MAIN_CUR_REC.TARGET_DATE;
        ic.COMMENT_ADDED_DATE := MAIN_CUR_REC.COMMENT_ADDED_DATE;
        
        iclist.EXTEND;
        iclist(iclist.LAST):=ic;
      
      END LOOP;
    RETURN iclist;
  END VIEW_INCIDENT_COMMENT;
  
  
END AUDIT_INSIDENT_COMMENT_PACK;

/


create or replace PACKAGE DASHBOARD_PACK AS 

  -- 0 - INBOX
  -- 1 - PENDING
  -- 3 - approveV
  FUNCTION GET_DASHBOARD (currentUser IN VARCHAR2, VIW NUMBER) RETURN DASHBOARD_CASES;
  FUNCTION UPDATE_MAIN_CASE(main_case_id IN NUMBER,audit_div IN VARCHAR2,cover_from IN TIMESTAMP,cover_to IN TIMESTAMP,exam_p_from IN TIMESTAMP,exam_p_to IN TIMESTAMP) RETURN VARCHAR2;

END DASHBOARD_PACK;

/

create or replace PACKAGE BODY DASHBOARD_PACK AS 
  FUNCTION GET_DASHBOARD (currentUser IN VARCHAR2, VIW NUMBER) RETURN DASHBOARD_CASES AS
    CURSOR MAIN_CUR IS 
      SELECT DOC_CASE_ID,CASE_CREATED_DIV,CASE_LAST_ACTION_DATE,AUDIT_AREA,AUDIT_MODE,CASE_CREATED_DATE,CASE_LAST_ACTION_STATUS,AUDIT_DIV,AUDIT_DIV_DESC
      FROM AUDIT_CASE_TBL
      WHERE (
      CASE_CREATED_USER = currentUser AND
      AUDIT_MAIN_CASE_DEL_FLAG!=1

      )

      ORDER By DOC_CASE_ID ASC;
      
    
    CURSOR CASE_ASSIGNED_CUR IS 
      SELECT DISTINCT MAIN_CASE_ID,CASE_CREATED_DIV,CASE_LAST_ACTION_DATE,(SELECT ac.AUDIT_AREA FROM AUDIT_CASE_TBL ac WHERE ac.DOC_CASE_ID = MAIN_CASE_ID  ) AS AUDIT_AREA , (SELECT ac.AUDIT_MODE FROM AUDIT_CASE_TBL ac WHERE ac.DOC_CASE_ID = MAIN_CASE_ID  ) AS AUDIT_MODE ,CASE_CREATED_DATE,CASE_LAST_ACTION_STATUS,(SELECT ac.AUDIT_DIV_DESC FROM AUDIT_CASE_TBL ac WHERE ac.DOC_CASE_ID = MAIN_CASE_ID  ) AS AUDIT_DIV_DESC
      FROM AUDIT_CHILD_CASE_TBL
      WHERE CURRENT_ASSIGNED_USER = currentUser AND CASE_LAST_ACTION_STATUS != 3 AND CASE_CREATED_USER != currentUser ORDER By MAIN_CASE_ID ASC;

    CURSOR CASE_INCI_CUR IS
        SELECT DISTINCT it.MAIN_CASE_ID,it.CHILD_CASE_ID,ct.CASE_CREATED_DIV,ct.CASE_LAST_ACTION_DATE,ct.AUDIT_AREA,ct.AUDIT_MODE,ct.CASE_CREATED_DATE,ct.CASE_LAST_ACTION_STATUS,ct.AUDIT_DIV, ct.AUDIT_DIV_DESC
        FROM AUDIT_INCIDENT_TBL it , AUDIT_CASE_TBL ct, AUDIT_CHILD_CASE_TBL cc
        WHERE it.MAIN_CASE_ID = ct.DOC_CASE_ID AND it.INCIDENT_CURRENT_ASSIGNED_USER = currentUser AND ct.CASE_CREATED_USER != currentUser AND cc.CHILD_CASE_ID = it.CHILD_CASE_ID AND cc.CURRENT_ASSIGNED_USER != it.INCIDENT_CURRENT_ASSIGNED_USER AND ct.AUDIT_MAIN_CASE_DEL_FLAG!=1
        ORDER By it.MAIN_CASE_ID ASC ;
 
    CURSOR PENDING_MAIN_CUR IS 
      SELECT DOC_CASE_ID,CASE_CREATED_DIV,CASE_LAST_ACTION_DATE,AUDIT_AREA,AUDIT_MODE,CASE_CREATED_DATE,CASE_LAST_ACTION_STATUS,AUDIT_DIV,AUDIT_DIV_DESC
      FROM AUDIT_CASE_TBL
      WHERE CASE_LAST_ACTION_USER = currentUser AND CURRENT_ASSIGNED_USER != currentUser AND CASE_LAST_ACTION_STATUS != 3 AND AUDIT_MAIN_CASE_DEL_FLAG!=1 ORDER By DOC_CASE_ID ASC;

      
    DCS DASHBOARD_CASES;
    DC DASHBOARD_CASE;
  BEGIN
    DCS:=NEW DASHBOARD_CASES();
    IF(VIW=0)THEN
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        DC:= NEW  DASHBOARD_CASE(0, '', NULL, 0, 0, NULL, '', 0,'','');
        DC.DOC_CASE_ID:=MAIN_CUR_REC.DOC_CASE_ID;
        DC.CASE_CREATED_DIV:=MAIN_CUR_REC.CASE_CREATED_DIV;
        DC.CASE_LAST_ACTION_DATE:=MAIN_CUR_REC.CASE_LAST_ACTION_DATE;
        DC.AUDIT_AREA:=MAIN_CUR_REC.AUDIT_AREA;
        DC.AUDIT_MODE:=MAIN_CUR_REC.AUDIT_MODE;
        DC.CASE_CREATED_DATE:=MAIN_CUR_REC.CASE_CREATED_DATE;
        DC.CASE_LAST_ACTION_STATUS:=MAIN_CUR_REC.CASE_LAST_ACTION_STATUS;
        DC.AUDIT_DIV := MAIN_CUR_REC.AUDIT_DIV;
        DC.AUDIT_DIV_DESC:=MAIN_CUR_REC.AUDIT_DIV_DESC;
        DC.CASE_STAT:=1; 
        
        DCS.EXTEND;
        DCS(DCS.LAST):=DC;
      END LOOP;
      
       FOR CASE_ASSIGNED_CUR_REC IN CASE_ASSIGNED_CUR LOOP
        DC:= NEW  DASHBOARD_CASE(0, '', NULL, 0, 0, NULL, '', 0,'','');
        DC.DOC_CASE_ID:=CASE_ASSIGNED_CUR_REC.MAIN_CASE_ID;
        DC.CASE_CREATED_DIV:=CASE_ASSIGNED_CUR_REC.CASE_CREATED_DIV;
        DC.CASE_LAST_ACTION_DATE:=CASE_ASSIGNED_CUR_REC.CASE_LAST_ACTION_DATE;
        DC.AUDIT_AREA:=CASE_ASSIGNED_CUR_REC.AUDIT_AREA;
        DC.AUDIT_MODE:=CASE_ASSIGNED_CUR_REC.AUDIT_MODE;
        DC.CASE_CREATED_DATE:=CASE_ASSIGNED_CUR_REC.CASE_CREATED_DATE;
        DC.CASE_LAST_ACTION_STATUS:=CASE_ASSIGNED_CUR_REC.CASE_LAST_ACTION_STATUS;
        DC.AUDIT_DIV_DESC:=CASE_ASSIGNED_CUR_REC.AUDIT_DIV_DESC;
        DC.CASE_STAT:=0;
        
        DCS.EXTEND;
        DCS(DCS.LAST):=DC;
      END LOOP;
      FOR CASE_INCI_CUR_REC IN CASE_INCI_CUR LOOP
        DC:= NEW  DASHBOARD_CASE(0, '', NULL, 0, 0, NULL, '', 0,'','');
        DC.DOC_CASE_ID:=CASE_INCI_CUR_REC.MAIN_CASE_ID;
        DC.CASE_CREATED_DIV:=CASE_INCI_CUR_REC.CASE_CREATED_DIV;
        DC.CASE_LAST_ACTION_DATE:=CASE_INCI_CUR_REC.CASE_LAST_ACTION_DATE;
        DC.AUDIT_AREA:=CASE_INCI_CUR_REC.AUDIT_AREA;
        DC.AUDIT_MODE:=CASE_INCI_CUR_REC.AUDIT_MODE;
        DC.CASE_CREATED_DATE:=CASE_INCI_CUR_REC.CASE_CREATED_DATE;
        DC.CASE_LAST_ACTION_STATUS:=CASE_INCI_CUR_REC.CASE_LAST_ACTION_STATUS;
        DC.AUDIT_DIV_DESC:=CASE_INCI_CUR_REC.AUDIT_DIV_DESC;
        DC.CASE_STAT:=0;
        
        DCS.EXTEND;
        DCS(DCS.LAST):=DC;
      END LOOP;
    END IF;
    IF(VIW=1)THEN
    FOR PENDING_MAIN_CUR_REC IN PENDING_MAIN_CUR LOOP
        DC:= NEW  DASHBOARD_CASE(0, '', NULL, 0, 0, NULL, '', 0,'','');
        DC.DOC_CASE_ID:=PENDING_MAIN_CUR_REC.DOC_CASE_ID;
        DC.CASE_CREATED_DIV:=PENDING_MAIN_CUR_REC.CASE_CREATED_DIV;
        DC.CASE_LAST_ACTION_DATE:=PENDING_MAIN_CUR_REC.CASE_LAST_ACTION_DATE;
        DC.AUDIT_AREA:=PENDING_MAIN_CUR_REC.AUDIT_AREA;
        DC.AUDIT_MODE:=PENDING_MAIN_CUR_REC.AUDIT_MODE;
        DC.CASE_CREATED_DATE:=PENDING_MAIN_CUR_REC.CASE_CREATED_DATE;
        DC.CASE_LAST_ACTION_STATUS:=PENDING_MAIN_CUR_REC.CASE_LAST_ACTION_STATUS;
        DC.AUDIT_DIV := PENDING_MAIN_CUR_REC.AUDIT_DIV;
        DC.AUDIT_DIV_DESC:=PENDING_MAIN_CUR_REC.AUDIT_DIV_DESC;
        DCS.EXTEND;
        DCS(DCS.LAST):=DC;
    
    END LOOP;
    END IF;
    
    RETURN DCS;
  END GET_DASHBOARD ;
  
  
  FUNCTION UPDATE_MAIN_CASE(main_case_id IN NUMBER,i_audit_div IN VARCHAR2,i_cover_from IN TIMESTAMP,i_cover_to IN TIMESTAMP,exam_p_from IN TIMESTAMP,exam_p_to IN TIMESTAMP) RETURN VARCHAR2 AS
   updateStatus VARCHAR2(10) := ''; 
    BEGIN
     UPDATE AUDIT_CASE_TBL
     SET COVER_FROM=i_cover_from, COVER_TO=i_cover_to, EXAM_PERIOD_FROM=exam_p_from, EXAM_PERIOD_TO=exam_p_to, AUDIT_DIV= i_audit_div
     WHERE DOC_CASE_ID=main_case_id ;
  
 
     dbms_output.put_line('Sucessfully 123 : - ' || sql%rowcount);
    if sql%rowcount > 0 then
   dbms_output.put_line('Sucessfully updated : - ');
   commit;
    updateStatus := 'SUCESS'; 
   ELSE
   dbms_output.put_line('Sucessfully FAIL : - '  );
   updateStatus := 'FAIL';
  end if;
    
    
    RETURN updateStatus;
  END UPDATE_MAIN_CASE;  
  
  
END DASHBOARD_PACK;

/
create or replace PACKAGE INSIDENT_LIST_PACK AS
     FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
--     FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
     FUNCTION VIEW_INCIDENT(I_main_case_id IN NUMBER, I_child_case_id NUMBER,I_incident_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST;
     FUNCTION GET_BRANCH_COMMENT_DETAILS (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER,I_incident_id IN NUMBER) RETURN BRANCH_COMMENT_TYPE_LIST;
--     FUNCTION UPDATE_FOLLOW_ACTION_DATA(f_rectified IN NUMBER, f_rec_date IN VARCHAR2,f_target_date IN VARCHAR2,f_res_officer IN VARCHAR2, i_id IN NUMBER)RETURN VARCHAR2;

    FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID(I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST;

FUNCTION UPDATE_AUDIT_INCIDENT(
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2;

FUNCTION UPDATE_AUDIT_INCIDENT_BR(
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2;
     --FUNCTION GET_FUR_BR_FLU_COMMENTS(I_main_case_id IN NUMBER,I_child_case_id IN NUMBER, I_incident_id IN NUMBER)RETURN FR_BR_FUL_COMMENT_TYPE_LIST;
   END  INSIDENT_LIST_PACK;

/
create or replace PACKAGE BODY INSIDENT_LIST_PACK AS
  FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS 
    SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        c.CASE_CREATED_USER,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c
       where i.MAIN_CASE_ID =I_main_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID;
       
       CURSOR ALL_INCI_CUR1 IS 
        SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        c.CASE_CREATED_USER,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c 
       where i.MAIN_CASE_ID =I_main_case_id and i.CHILD_CASE_ID = I_child_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID;
        
    AUDIT_INSIDENT_LIST AUDIT_INSIDENT_TYPE_LIST;
    AUDIT_INSIDENT AUDIT_INSIDENT_TYPE;
  BEGIN
      AUDIT_INSIDENT_LIST:=NEW AUDIT_INSIDENT_TYPE_LIST();
      IF(I_child_case_id = 0) THEN
        FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=MAIN_CUR_REC.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=MAIN_CUR_REC.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=MAIN_CUR_REC.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := MAIN_CUR_REC.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := MAIN_CUR_REC.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
       
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      
      ELSE
        FOR ALL_INCI_CUR_REC1 IN ALL_INCI_CUR1 LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null);
       
        AUDIT_INSIDENT.MAIN_CASE_ID := ALL_INCI_CUR_REC1.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := ALL_INCI_CUR_REC1.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=ALL_INCI_CUR_REC1.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=ALL_INCI_CUR_REC1.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=ALL_INCI_CUR_REC1.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=ALL_INCI_CUR_REC1.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=ALL_INCI_CUR_REC1.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=ALL_INCI_CUR_REC1.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=ALL_INCI_CUR_REC1.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=ALL_INCI_CUR_REC1.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=ALL_INCI_CUR_REC1.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=ALL_INCI_CUR_REC1.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=ALL_INCI_CUR_REC1.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=ALL_INCI_CUR_REC1.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=ALL_INCI_CUR_REC1.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=ALL_INCI_CUR_REC1.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=ALL_INCI_CUR_REC1.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=ALL_INCI_CUR_REC1.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=ALL_INCI_CUR_REC1.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=ALL_INCI_CUR_REC1.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=ALL_INCI_CUR_REC1.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=ALL_INCI_CUR_REC1.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=ALL_INCI_CUR_REC1.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=ALL_INCI_CUR_REC1.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=ALL_INCI_CUR_REC1.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=ALL_INCI_CUR_REC1.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=ALL_INCI_CUR_REC1.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := ALL_INCI_CUR_REC1.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := ALL_INCI_CUR_REC1.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := ALL_INCI_CUR_REC1.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := ALL_INCI_CUR_REC1.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := ALL_INCI_CUR_REC1.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := ALL_INCI_CUR_REC1.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := ALL_INCI_CUR_REC1.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := ALL_INCI_CUR_REC1.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := ALL_INCI_CUR_REC1.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := ALL_INCI_CUR_REC1.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=ALL_INCI_CUR_REC1.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=ALL_INCI_CUR_REC1.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=ALL_INCI_CUR_REC1.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=ALL_INCI_CUR_REC1.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=ALL_INCI_CUR_REC1.FOLLOW_UP_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      END IF;
      
    
    RETURN AUDIT_INSIDENT_LIST;
  END GET_INCIDENT_LIST_BY_CHILD_CASE_ID;
  
FUNCTION VIEW_INCIDENT (I_main_case_id IN NUMBER, I_child_case_id NUMBER,I_incident_id IN NUMBER) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS
    
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INCIDENT_ID,AUDIT_STATUS,IMPACT,LIKELIHOOD,OVERALL_RISK,SAMPLE_COUNT,ISSUE_COUNT,POTENTIAL_IMPACT,RECOMMENDATION,ROOT_CAUSE,DETAILS_ROOT_CAUSE,AGREE_WITH_AUDIT,
    RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,COMMENT_HEADING,INCIDENT_COMMENT,INCIDENT_CREATED_USER,INCIDENT_CURRENT_ASSIGNED_USER,INCIDENT_CREATED_DIV,INCIDENT_CURRENT_ASSIGNED_DIV,HR,
    POLICIES_AND_PROCEDURE,PROCESS_AND_EXECUTION,IT,PERFORMANCE_MEASUREMENT,LAST_NODE1,LAST_NODE_ORDER1,LAST_NODE2,LAST_NODE_ORDER2,LAST_NODE3,LAST_NODE_ORDER3,
    LAST_NODE4,LAST_NODE_ORDER4,LAST_NODE5,LAST_NODE_ORDER5,LAST_NODE_ID,LAST_NODE_ELEMENT_ORDER,OVERALL_INCIDENT_STATUS,FOLLOW_UP_RECTIFIED,FOLLOW_UP_RECTIFIED_DATE,FOLLOW_UP_TARGET_DATE,FOLLOW_UP_RESPONSIBLE_OFFICER,TARGET_DATE,BR_COMMENT,FUR_COMMENT,FOLLOW_UP_COMMENT,
    (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
    FROM AUDIT_INCIDENT_TBL
    WHERE MAIN_CASE_ID= I_main_case_id AND CHILD_CASE_ID=I_child_case_id AND INCIDENT_ID=I_incident_id AND DEL_FLAG !=1;
    
    il AUDIT_INSIDENT_TYPE_LIST;
    it AUDIT_INSIDENT_TYPE;
    
    BEGIN
    
    il:=NEW AUDIT_INSIDENT_TYPE_LIST();
   
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
      it:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null);
      
        it.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        it.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        it.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        it.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        it.IMPACT:=MAIN_CUR_REC.IMPACT;
        it.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        it.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        it.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        it.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        it.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        it.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        it.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        it.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        it.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        it.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        it.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        it.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        it.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        it.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        it.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        it.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        it.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        it.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        it.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        it.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        it.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        it.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        it.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        it.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        it.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        it.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        it.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        it.HR:=MAIN_CUR_REC.HR;
        it.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        it.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        it.IT:=MAIN_CUR_REC.IT;
        it.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        it.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        it.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        it.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        it.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        it.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        it.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        it.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        it.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        it.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        it.FOLLOW_UP_RECTIFIED := MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        it.FOLLOW_UP_RECTIFIED_DATE :=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        it.FOLLOW_UP_TARGET_DATE := MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        it.FOLLOW_UP_RESPONSIBLE_OFFICER :=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        it.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        it.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        it.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        it.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        
        il.EXTEND;
        il(il.LAST):=it;
      END LOOP;
  
  RETURN il;
  END VIEW_INCIDENT;
  
   FUNCTION GET_BRANCH_COMMENT_DETAILS (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER,I_incident_id IN NUMBER) RETURN BRANCH_COMMENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INSIDENT_ID, INSIDENT_COMMENT,AGREE_WITH_AUDIT,RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,TARGET_DATE,COMMENT_ADDED_DATE
    FROM AUDIT_INSIDENT_COMMENT_TBL
    WHERE MAIN_CASE_ID = I_main_case_id
    AND CHILD_CASE_ID = I_child_case_id
    AND INSIDENT_ID = I_incident_id ORDER BY COMMENT_ADDED_DATE DESC FETCH FIRST 1 ROWS ONLY;
    
    CURSOR SUB_CUR IS
    SELECT MAIN_CASE_ID,CHILD_CASE_ID,INSIDENT_ID, INSIDENT_COMMENT,AGREE_WITH_AUDIT,RESPONSIBLE_OFFICER,RECTIFIED,RECTIFY_DATE,TARGET_DATE,COMMENT_ADDED_DATE
    FROM AUDIT_INSIDENT_COMMENT_TBL
    WHERE MAIN_CASE_ID = I_main_case_id
   -- AND CHILD_CASE_ID = I_child_case_id
    AND INSIDENT_ID = I_incident_id ORDER BY COMMENT_ADDED_DATE DESC FETCH FIRST 1 ROWS ONLY;
    
    bcl BRANCH_COMMENT_TYPE_LIST;
    bc BRANCH_COMMENT_TYPE;
    
    BEGIN
    
    bcl:=NEW BRANCH_COMMENT_TYPE_LIST();
    IF(I_child_case_id = 0) THEN
    
      FOR SUB_CUR_REC IN SUB_CUR LOOP
      bc:= NEW  BRANCH_COMMENT_TYPE(0,'',0,null,null,null,0,0,0,null);
      
        bc.MAIN_CASE_ID := SUB_CUR_REC.MAIN_CASE_ID;
        bc.AGREE_WITH_AUDIT :=SUB_CUR_REC.AGREE_WITH_AUDIT;
        bc.RESPONSIBLE_OFFICER := SUB_CUR_REC.RESPONSIBLE_OFFICER;
        bc.RECTIFIED := SUB_CUR_REC.RECTIFIED;
        bc.RECTIFY_DATE := SUB_CUR_REC.RECTIFY_DATE;
        bc.TARGET_DATE := SUB_CUR_REC.TARGET_DATE;
        bc.COMMENT_ADDED_DATE := SUB_CUR_REC.COMMENT_ADDED_DATE;
        bc.CHILD_CASE_ID := SUB_CUR_REC.CHILD_CASE_ID;
        bc.INSIDENT_ID :=SUB_CUR_REC.INSIDENT_ID;
        bc.INSIDENT_COMMENT := SUB_CUR_REC.INSIDENT_COMMENT;
        
        bcl.EXTEND;
        bcl(bcl.LAST):=bc;
      END LOOP;
      ELSE
      FOR MAIN_CUR_REC IN MAIN_CUR LOOP
      bc:= NEW  BRANCH_COMMENT_TYPE(0,'',0,null,null,null,0,0,0,null);
      
        bc.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        bc.AGREE_WITH_AUDIT :=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        bc.RESPONSIBLE_OFFICER := MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        bc.RECTIFIED := MAIN_CUR_REC.RECTIFIED;
        bc.RECTIFY_DATE := MAIN_CUR_REC.RECTIFY_DATE;
        bc.TARGET_DATE := MAIN_CUR_REC.TARGET_DATE;
        bc.COMMENT_ADDED_DATE := MAIN_CUR_REC.COMMENT_ADDED_DATE;
        bc.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        bc.INSIDENT_ID :=MAIN_CUR_REC.INSIDENT_ID;
        bc.INSIDENT_COMMENT := MAIN_CUR_REC.INSIDENT_COMMENT;
        
        bcl.EXTEND;
        bcl(bcl.LAST):=bc;
      END LOOP;
      
      END IF;
  
  RETURN bcl;
  END GET_BRANCH_COMMENT_DETAILS;
  

--GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID

FUNCTION GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID (I_main_case_id IN NUMBER, I_child_case_id IN NUMBER, I_current_assigned_user IN VARCHAR2) RETURN AUDIT_INSIDENT_TYPE_LIST AS
    CURSOR MAIN_CUR IS 
    SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        c.CASE_CREATED_USER,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c
       where i.MAIN_CASE_ID =I_main_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_USER = I_current_assigned_user;
       
       CURSOR ALL_INCI_CUR1 IS 
        SELECT i.MAIN_CASE_ID,
        i.CHILD_CASE_ID, 
        i.INCIDENT_ID  , 
        i.AUDIT_STATUS , 
        i.IMPACT , 
        i.LIKELIHOOD , 
        i.OVERALL_RISK , 
        i.SAMPLE_COUNT , 
        i.ISSUE_COUNT , 
        i.POTENTIAL_IMPACT, 
        i.RECOMMENDATION , 
        i.ROOT_CAUSE , 
        i.DETAILS_ROOT_CAUSE , 
        i.AGREE_WITH_AUDIT, 
        i.RESPONSIBLE_OFFICER , 
        i.RECTIFIED , 
        i.RECTIFY_DATE , 
        i.COMMENT_HEADING ,	 
        i.LAST_NODE1 , 
        i.LAST_NODE_ORDER1 , 
        i.LAST_NODE2 , 
        i.LAST_NODE_ORDER2 , 
        i.LAST_NODE3 , 
        i.LAST_NODE_ORDER3 , 
        i.LAST_NODE4 , 
        i.LAST_NODE_ORDER4 , 
        i.LAST_NODE5 , 
        i.LAST_NODE_ORDER5 , 
        i.INCIDENT_CREATED_USER , 
        i.INCIDENT_CURRENT_ASSIGNED_USER , 
        i.INCIDENT_CREATED_DIV , 
        i.INCIDENT_CURRENT_ASSIGNED_DIV , 
        i.HR , 
        i.POLICIES_AND_PROCEDURE , 
        i.PROCESS_AND_EXECUTION , 
        i.IT,
        i.PERFORMANCE_MEASUREMENT,
        i.INCIDENT_COMMENT,
        i.BR_COMMENT_FLAG,
        i.LAST_NODE_ID,
        i.LAST_NODE_ELEMENT_ORDER,
        i.OVERALL_INCIDENT_STATUS,
        i.FOLLOW_UP_RECTIFIED,
        i.FOLLOW_UP_RECTIFIED_DATE,
        i.FOLLOW_UP_TARGET_DATE,
        i.FOLLOW_UP_RESPONSIBLE_OFFICER,
        i.BR_COMMENT,
        i.FUR_COMMENT,
        i.FOLLOW_UP_COMMENT,
        i.TARGET_DATE,
        c.CASE_CREATED_USER,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE1 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER1 ) AS LAST_NODE1_DESC, 
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE2 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER2 ) AS LAST_NODE2_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE3 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER3 ) AS LAST_NODE3_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE4 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER4 ) AS LAST_NODE4_DESC,
        (SELECT c.NODE_DESCRIPTION from AUDIT_CHECK_LIST_TBL c where c.NODE_ID = i.LAST_NODE5 
        AND c.NODE_ELEMENT_ORDER = i.LAST_NODE_ORDER5 ) AS LAST_NODE5_DESC
        from AUDIT_INCIDENT_TBL i , AUDIT_CASE_TBL c 
       where i.MAIN_CASE_ID =I_main_case_id and i.CHILD_CASE_ID = I_child_case_id AND i.MAIN_CASE_ID = c.DOC_CASE_ID AND i.INCIDENT_CURRENT_ASSIGNED_USER = I_current_assigned_user;
        
    AUDIT_INSIDENT_LIST AUDIT_INSIDENT_TYPE_LIST;
    AUDIT_INSIDENT AUDIT_INSIDENT_TYPE;
  BEGIN
      AUDIT_INSIDENT_LIST:=NEW AUDIT_INSIDENT_TYPE_LIST();
      IF(I_child_case_id = 0) THEN
        FOR MAIN_CUR_REC IN MAIN_CUR LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := MAIN_CUR_REC.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := MAIN_CUR_REC.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=MAIN_CUR_REC.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=MAIN_CUR_REC.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=MAIN_CUR_REC.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=MAIN_CUR_REC.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=MAIN_CUR_REC.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=MAIN_CUR_REC.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=MAIN_CUR_REC.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=MAIN_CUR_REC.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=MAIN_CUR_REC.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=MAIN_CUR_REC.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=MAIN_CUR_REC.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=MAIN_CUR_REC.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=MAIN_CUR_REC.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=MAIN_CUR_REC.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=MAIN_CUR_REC.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=MAIN_CUR_REC.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=MAIN_CUR_REC.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=MAIN_CUR_REC.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=MAIN_CUR_REC.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=MAIN_CUR_REC.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=MAIN_CUR_REC.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=MAIN_CUR_REC.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=MAIN_CUR_REC.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=MAIN_CUR_REC.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=MAIN_CUR_REC.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=MAIN_CUR_REC.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=MAIN_CUR_REC.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=MAIN_CUR_REC.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=MAIN_CUR_REC.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=MAIN_CUR_REC.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=MAIN_CUR_REC.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=MAIN_CUR_REC.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=MAIN_CUR_REC.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=MAIN_CUR_REC.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := MAIN_CUR_REC.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := MAIN_CUR_REC.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := MAIN_CUR_REC.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := MAIN_CUR_REC.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := MAIN_CUR_REC.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := MAIN_CUR_REC.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := MAIN_CUR_REC.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := MAIN_CUR_REC.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := MAIN_CUR_REC.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := MAIN_CUR_REC.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=MAIN_CUR_REC.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=MAIN_CUR_REC.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=MAIN_CUR_REC.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=MAIN_CUR_REC.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=MAIN_CUR_REC.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=MAIN_CUR_REC.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=MAIN_CUR_REC.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=MAIN_CUR_REC.FOLLOW_UP_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      
      ELSE
        FOR ALL_INCI_CUR_REC1 IN ALL_INCI_CUR1 LOOP
        AUDIT_INSIDENT:= NEW  AUDIT_INSIDENT_TYPE(0,0,0,'','','','',0,0,'','','','',0,'',0,null,'',null,'','','','','','', '','','','','','',	'',	'',	0,0,0,0,0,'','','','','','',0,'','','',0,null,null,'',null,null,null,null);
        
        AUDIT_INSIDENT.MAIN_CASE_ID := ALL_INCI_CUR_REC1.MAIN_CASE_ID;
        AUDIT_INSIDENT.CHILD_CASE_ID := ALL_INCI_CUR_REC1.CHILD_CASE_ID;
        AUDIT_INSIDENT.INCIDENT_ID:=ALL_INCI_CUR_REC1.INCIDENT_ID;
        AUDIT_INSIDENT.AUDIT_STATUS:=ALL_INCI_CUR_REC1.AUDIT_STATUS;
        AUDIT_INSIDENT.IMPACT:=ALL_INCI_CUR_REC1.IMPACT;
        AUDIT_INSIDENT.LIKELIHOOD:=ALL_INCI_CUR_REC1.LIKELIHOOD;
        AUDIT_INSIDENT.OVERALL_RISK:=ALL_INCI_CUR_REC1.OVERALL_RISK;
        AUDIT_INSIDENT.SAMPLE_COUNT:=ALL_INCI_CUR_REC1.SAMPLE_COUNT;
        AUDIT_INSIDENT.ISSUE_COUNT:=ALL_INCI_CUR_REC1.ISSUE_COUNT;
        AUDIT_INSIDENT.POTENTIAL_IMPACT:=ALL_INCI_CUR_REC1.POTENTIAL_IMPACT;
        AUDIT_INSIDENT.RECOMMENDATION:=ALL_INCI_CUR_REC1.RECOMMENDATION;
        AUDIT_INSIDENT.ROOT_CAUSE:=ALL_INCI_CUR_REC1.ROOT_CAUSE;
        AUDIT_INSIDENT.DETAILS_ROOT_CAUSE:=ALL_INCI_CUR_REC1.DETAILS_ROOT_CAUSE;
        AUDIT_INSIDENT.AGREE_WITH_AUDIT:=ALL_INCI_CUR_REC1.AGREE_WITH_AUDIT;
        AUDIT_INSIDENT.RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.RECTIFIED:=ALL_INCI_CUR_REC1.RECTIFIED;
        AUDIT_INSIDENT.RECTIFY_DATE:=ALL_INCI_CUR_REC1.RECTIFY_DATE;
        AUDIT_INSIDENT.COMMENT_HEADING:=ALL_INCI_CUR_REC1.COMMENT_HEADING;
        AUDIT_INSIDENT.LAST_NODE1:=ALL_INCI_CUR_REC1.LAST_NODE1;
        AUDIT_INSIDENT.LAST_NODE2:=ALL_INCI_CUR_REC1.LAST_NODE2;
        AUDIT_INSIDENT.LAST_NODE3:=ALL_INCI_CUR_REC1.LAST_NODE3;
        AUDIT_INSIDENT.LAST_NODE4:=ALL_INCI_CUR_REC1.LAST_NODE4;
        AUDIT_INSIDENT.LAST_NODE5:=ALL_INCI_CUR_REC1.LAST_NODE5;
        AUDIT_INSIDENT.LAST_NODE_ORDER1:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER1;
        AUDIT_INSIDENT.LAST_NODE_ORDER2:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER2;
        AUDIT_INSIDENT.LAST_NODE_ORDER3:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER3;
        AUDIT_INSIDENT.LAST_NODE_ORDER4:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER4;
        AUDIT_INSIDENT.LAST_NODE_ORDER5:=ALL_INCI_CUR_REC1.LAST_NODE_ORDER5;
        AUDIT_INSIDENT.INCIDENT_CREATED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_USER;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_USER:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_USER;
        AUDIT_INSIDENT.INCIDENT_CREATED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CREATED_DIV;
        AUDIT_INSIDENT.INCIDENT_CURRENT_ASSIGNED_DIV:=ALL_INCI_CUR_REC1.INCIDENT_CURRENT_ASSIGNED_DIV;
        AUDIT_INSIDENT.HR:=ALL_INCI_CUR_REC1.HR;
        AUDIT_INSIDENT.POLICIES_AND_PROCEDURE:=ALL_INCI_CUR_REC1.POLICIES_AND_PROCEDURE;
        AUDIT_INSIDENT.PROCESS_AND_EXECUTION:=ALL_INCI_CUR_REC1.PROCESS_AND_EXECUTION;
        AUDIT_INSIDENT.IT:=ALL_INCI_CUR_REC1.IT;
        AUDIT_INSIDENT.PERFORMANCE_MEASUREMENT:=ALL_INCI_CUR_REC1.PERFORMANCE_MEASUREMENT;
        AUDIT_INSIDENT.NODE_DESCRIPTION1 := ALL_INCI_CUR_REC1.LAST_NODE1_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION2 := ALL_INCI_CUR_REC1.LAST_NODE2_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION3 := ALL_INCI_CUR_REC1.LAST_NODE3_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION4 := ALL_INCI_CUR_REC1.LAST_NODE4_DESC;
        AUDIT_INSIDENT.NODE_DESCRIPTION5 := ALL_INCI_CUR_REC1.LAST_NODE5_DESC;
        AUDIT_INSIDENT.INCIDENT_COMMENT := ALL_INCI_CUR_REC1.INCIDENT_COMMENT;
        AUDIT_INSIDENT.CASE_CREATED_USER := ALL_INCI_CUR_REC1.CASE_CREATED_USER;
        AUDIT_INSIDENT.BR_COMMENT_FLAG := ALL_INCI_CUR_REC1.BR_COMMENT_FLAG;
        AUDIT_INSIDENT.LAST_NODE_ID := ALL_INCI_CUR_REC1.LAST_NODE_ID;
        AUDIT_INSIDENT.LAST_NODE_ELEMENT_ORDER := ALL_INCI_CUR_REC1.LAST_NODE_ELEMENT_ORDER;
        AUDIT_INSIDENT.OVERALL_INCIDENT_STATUS:=ALL_INCI_CUR_REC1.OVERALL_INCIDENT_STATUS;
        
        AUDIT_INSIDENT.TARGET_DATE:=ALL_INCI_CUR_REC1.TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED;
        AUDIT_INSIDENT.FOLLOW_UP_RECTIFIED_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_RECTIFIED_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_TARGET_DATE:=ALL_INCI_CUR_REC1.FOLLOW_UP_TARGET_DATE;
        AUDIT_INSIDENT.FOLLOW_UP_RESPONSIBLE_OFFICER:=ALL_INCI_CUR_REC1.FOLLOW_UP_RESPONSIBLE_OFFICER;
        AUDIT_INSIDENT.BR_COMMENT:=ALL_INCI_CUR_REC1.BR_COMMENT;
        AUDIT_INSIDENT.FUR_COMMENT:=ALL_INCI_CUR_REC1.FUR_COMMENT;
        AUDIT_INSIDENT.FOLLOW_UP_COMMENT:=ALL_INCI_CUR_REC1.FOLLOW_UP_COMMENT;
        
        AUDIT_INSIDENT_LIST.EXTEND;
        AUDIT_INSIDENT_LIST(AUDIT_INSIDENT_LIST.LAST):=AUDIT_INSIDENT;
      END LOOP;
      END IF;
      
    
    RETURN AUDIT_INSIDENT_LIST;
  END GET_INCIDENT_LIST_BY_CHILD_CASE_ID_USER_ID;

--FUNCTION UPDATE_FOLLOW_ACTION_DATA(follow_up_rectified IN VARCHAR2, follow_up_rec_date IN VARCHAR2,follow_up_target_date IN VARCHAR2,follow_up_res_officer IN VARCHAR2, incident_id IN NUMBER)RETURN VARCHAR2
--FUNCTION UPDATE_FOLLOW_ACTION_DATA(f_rectified IN NUMBER, f_rec_date IN VARCHAR2,f_target_date IN VARCHAR2,f_res_officer IN VARCHAR2, i_id IN NUMBER)RETURN VARCHAR2 AS
--  status_of_updation VARCHAR2(10); 
--BEGIN
--
--  UPDATE AUDIT_INCIDENT_TBL
--  SET
--     FOLLOW_UP_RECTIFIED = f_rectified,
--     FOLLOW_UP_RECTIFIED_DATE = TO_TIMESTAMP(f_rec_date),
--     FOLLOW_UP_TARGET_DATE = TO_TIMESTAMP(f_target_date),
--     FOLLOW_UP_RESPONSIBLE_OFFICER= f_res_officer 
--  WHERE
--     INCIDENT_ID = i_id;
--     --commit;
--   dbms_output.put_line('Sucessfully 123 : - ' || sql%rowcount);
--    if sql%rowcount > 0 then
--   dbms_output.put_line('Sucessfully INSERT : - ');
--   commit;
--    status_of_updation := 'SUCESS'; 
--   ELSE
--   dbms_output.put_line('Sucessfully FAIL : - '  );
--   status_of_updation := 'FAIL';
--  end if;
--
--RETURN status_of_updation;
--END UPDATE_FOLLOW_ACTION_DATA;

FUNCTION UPDATE_AUDIT_INCIDENT(
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2 AS 
    status_reply VARCHAR2(50) := '';
BEGIN
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        FOLLOW_UP_RECTIFIED = p_rectified,
        FOLLOW_UP_RECTIFIED_DATE = TO_TIMESTAMP(p_rectified_date), -- Assuming the format
        FOLLOW_UP_TARGET_DATE = TO_TIMESTAMP(p_target_date), -- Assuming the format
        FOLLOW_UP_RESPONSIBLE_OFFICER = p_responsible_officer,
        FOLLOW_UP_COMMENT = p_br_comment
    WHERE INCIDENT_ID = p_incident_id;

    dbms_output.put_line('Update operation attempted on ' || sql%rowcount || ' rows.');

    IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully updated.');
        COMMIT;
        status_reply := 'SUCCESS';
    ELSE
        dbms_output.put_line('Update failed.');
        status_reply := 'FAILS';
    END IF;

    RETURN status_reply;
END UPDATE_AUDIT_INCIDENT;
  
  FUNCTION UPDATE_AUDIT_INCIDENT_BR(
    P_agreed_with_audit IN AUDIT_INCIDENT_TBL.AGREE_WITH_AUDIT%TYPE,
    p_rectified IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RECTIFIED%TYPE,
    p_rectified_date IN VARCHAR2,
    p_target_date IN VARCHAR2,
    p_responsible_officer IN AUDIT_INCIDENT_TBL.FOLLOW_UP_RESPONSIBLE_OFFICER%TYPE,
    p_br_comment IN AUDIT_INCIDENT_TBL.BR_COMMENT%TYPE,
    p_incident_id IN AUDIT_INCIDENT_TBL.INCIDENT_ID%TYPE
) RETURN VARCHAR2 AS 
    status_reply VARCHAR2(50) := '';
BEGIN
    UPDATE AUDIT_INCIDENT_TBL 
    SET BR_COMMENT_FLAG=1,
        AGREE_WITH_AUDIT=P_agreed_with_audit,
        RECTIFIED  = p_rectified,
        RECTIFY_DATE = TO_TIMESTAMP(p_rectified_date), -- Assuming the format
        TARGET_DATE = TO_TIMESTAMP(p_target_date), -- Assuming the format
        RESPONSIBLE_OFFICER = p_responsible_officer,
        BR_COMMENT = p_br_comment
    WHERE INCIDENT_ID = p_incident_id;

    dbms_output.put_line('Update operation attempted on ' || sql%rowcount || ' rows.');

    IF sql%rowcount > 0 THEN
        dbms_output.put_line('Successfully updated.');
        COMMIT;
        status_reply := 'SUCCESS';
    ELSE
        dbms_output.put_line('Update failed.');
        status_reply := 'FAILS';
    END IF;

    RETURN status_reply;
END UPDATE_AUDIT_INCIDENT_BR;
  
END INSIDENT_LIST_PACK;



/

create or replace PACKAGE REPORT_GENERATOR IS
  -- Declare the function to retrieve details
  FUNCTION RPTPG1_RETRIEVE_DETAILS(main_case_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG2_REPORT_SUMMERY (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG4_IMAGE_TABLE (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;
  FUNCTION RPTINSTANCE_TABLE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR;

END REPORT_GENERATOR;

/

create or replace PACKAGE BODY REPORT_GENERATOR IS
  -- Implement the function
  FUNCTION RPTPG1_RETRIEVE_DETAILS(main_case_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur SYS_REFCURSOR;
  BEGIN
    OPEN cur FOR
      SELECT YEAR, AUDIT_DIV, AUDIT_DIV_DESC
      FROM AUDIT_CASE_TBL
      WHERE DOC_CASE_ID = main_case_ID;

    RETURN cur;
  END RPTPG1_RETRIEVE_DETAILS;
  
  FUNCTION RPTPG2_REPORT_SUMMERY(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
  BEGIN
    OPEN cur1 FOR
    SELECT * FROM AUDIT_CASE_TBL ac INNER JOIN AUDIT_REPORT_SUMMARY rs ON ac.DOC_CASE_ID = rs.MAIN_CASE_ID 
    WHERE rs.MAIN_CASE_ID = CASE_ID;
     
     RETURN cur1;
  END RPTPG2_REPORT_SUMMERY;
  
 FUNCTION RPTPG4_IMAGE_TABLE (CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
      cur1 SYS_REFCURSOR;
      BEGIN
      OPEN cur1 FOR
    
      SELECT COMMENTS FROM AUDIT_FINANCIAL_HIGHLIGHTS fi 
      WHERE fi.MAIN_CASE_ID = CASE_ID;
    
      RETURN cur1;
END RPTPG4_IMAGE_TABLE;
  
FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
     BEGIN
    OPEN cur1 FOR
    
    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,D.NODE_DESCRIPTION,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,it
    FROM AUDIT_CHILD_CASE_TBL A
    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = 1406) AND C.FYI = 0 AND B.SECTION_AREA = 'OPERATIONS';
    
    RETURN cur1;
    END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_OPS;
  
FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    
    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,D.NODE_DESCRIPTION,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,it
    FROM AUDIT_CHILD_CASE_TBL A
    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = 1406) AND C.FYI = 0 AND B.SECTION_AREA = 'CREDIT';
    
    RETURN cur1;
END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_CREDIT;

FUNCTION RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    
    SELECT B.SECTION_AREA,B.SECTION_DESCRIPTION,D.NODE_DESCRIPTION,D.SUB_ID,C.OVERALL_RISK,C.HR,C.POLICIES_AND_PROCEDURE,C.PROCESS_AND_EXECUTION,C.PERFORMANCE_MEASUREMENT,it
    FROM AUDIT_CHILD_CASE_TBL A
    INNER JOIN AUDIT_SECTION_TBL B ON (A.LAST_NODE_ID = B.PARENT_NODE) AND (A.LAST_NODE_ELEMENT_ORDER = B.PARENT_NODE_ORDER ) 
    JOIN AUDIT_INCIDENT_TBL C ON A.MAIN_CASE_ID= C.MAIN_CASE_ID AND (A.CHILD_CASE_ID = C.CHILD_CASE_ID)
    JOIN AUDIT_CHECK_LIST_TBL D ON (C.LAST_NODE_ID = D.NODE_ID) AND (C.LAST_NODE_ELEMENT_ORDER = D.NODE_ELEMENT_ORDER) 
    WHERE (A.MAIN_CASE_ID = 1406) AND C.FYI = 1;
    
    RETURN cur1;
END RPTPG5_CURRENT_YEAR_AUDIT_FINDINGS_FYI;

FUNCTION RPTINSTANCE_TABLE(CASE_ID IN NUMBER) RETURN SYS_REFCURSOR AS
    cur1 SYS_REFCURSOR;
    BEGIN
    OPEN cur1 FOR
    SELECT * 
    FROM AUDIT_INCIDENT_TBL A
    JOIN AUDIT_CHECK_LIST_TBL B ON A.LAST_NODE_ID = B.NODE_ID AND A.LAST_NODE_ELEMENT_ORDER = B.NODE_ELEMENT_ORDER
    JOIN AUDIT_CHILD_CASE_TBL C ON A.CHILD_CASE_ID = C.CHILD_CASE_ID
    JOIN AUDIT_SECTION_TBL D ON D.PARENT_NODE = C.LAST_NODE_ID AND D.PARENT_NODE_ORDER=C.LAST_NODE_ELEMENT_ORDER
    WHERE A.MAIN_CASE_ID = CASE_ID;
    
    RETURN cur1;
END  RPTINSTANCE_TABLE;

  
END REPORT_GENERATOR;



/

create or replace PACKAGE RISK_CAL_PACK AS 

  FUNCTION GET_OVERALL_RISK_FOR_INCIDENT(cal_code IN VARCHAR2, significant IN VARCHAR2,likelyhood IN VARCHAR2) RETURN VARCHAR2;

END RISK_CAL_PACK;

/


create or replace PACKAGE BODY RISK_CAL_PACK AS

  FUNCTION GET_OVERALL_RISK_FOR_INCIDENT(cal_code IN VARCHAR2, significant IN VARCHAR2,likelyhood IN VARCHAR2) 
  RETURN VARCHAR2 
  IS
   o_risk AUDIT_OVERALL_RISK_FACTORS.OVERALLRISK%TYPE; 
  BEGIN
      SELECT OVERALLRISK
      INTO o_risk
      FROM AUDIT_OVERALL_RISK_FACTORS
      WHERE RISK_CAL_CODE=cal_code AND LIKELIHOOD= likelyhood AND SIGNIFICANCE = significant AND ACTIVE_STATUS=1;
	
    RETURN o_risk;
  END GET_OVERALL_RISK_FOR_INCIDENT;

END RISK_CAL_PACK;

/